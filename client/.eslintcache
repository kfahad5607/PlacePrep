[{"E:\\project\\PlacePrep\\client\\src\\index.js":"1","E:\\project\\PlacePrep\\client\\src\\store\\configureStore.js":"2","E:\\project\\PlacePrep\\client\\src\\App.js":"3","E:\\project\\PlacePrep\\client\\src\\store\\reducers\\reducer.js":"4","E:\\project\\PlacePrep\\client\\src\\components\\layout\\Alerts.js":"5","E:\\project\\PlacePrep\\client\\src\\components\\auth\\Resetpassword.js":"6","E:\\project\\PlacePrep\\client\\src\\components\\auth\\Register.js":"7","E:\\project\\PlacePrep\\client\\src\\store\\actions\\authActions.js":"8","E:\\project\\PlacePrep\\client\\src\\components\\routing\\TestRoute.js":"9","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizPage.js":"10","E:\\project\\PlacePrep\\client\\src\\components\\routing\\PrivateRoute.js":"11","E:\\project\\PlacePrep\\client\\src\\components\\layout\\Home.js":"12","E:\\project\\PlacePrep\\client\\src\\components\\auth\\Login.js":"13","E:\\project\\PlacePrep\\client\\src\\store\\reducers\\alertReducers.js":"14","E:\\project\\PlacePrep\\client\\src\\store\\reducers\\authReducers.js":"15","E:\\project\\PlacePrep\\client\\src\\store\\reducers\\quizReducers.js":"16","E:\\project\\PlacePrep\\client\\src\\store\\reducers\\practiceProblemReducers.js":"17","E:\\project\\PlacePrep\\client\\src\\store\\reducers\\codeReducers.js":"18","E:\\project\\PlacePrep\\client\\src\\store\\actions\\alertActions.js":"19","E:\\project\\PlacePrep\\client\\src\\components\\auth\\MessagePanel.js":"20","E:\\project\\PlacePrep\\client\\src\\components\\auth\\UserProfile.js":"21","E:\\project\\PlacePrep\\client\\src\\store\\actions\\actionTypes.js":"22","E:\\project\\PlacePrep\\client\\src\\components\\auth\\ResPassModal.js":"23","E:\\project\\PlacePrep\\client\\src\\store\\actions\\quizActions.js":"24","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizQues.js":"25","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizTimer.js":"26","E:\\project\\PlacePrep\\client\\src\\components\\layout\\Navbar.js":"27","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizCardPage.js":"28","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\CreateQuiz.js":"29","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\EditQuiz.js":"30","E:\\project\\PlacePrep\\client\\src\\components\\layout\\Spinner.js":"31","E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\UserTable.js":"32","E:\\project\\PlacePrep\\client\\src\\components\\coding\\Coding.js":"33","E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodeSubmissions.js":"34","E:\\project\\PlacePrep\\client\\src\\components\\sidebar\\SideBar.js":"35","E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodingSub.js":"36","E:\\project\\PlacePrep\\client\\src\\components\\code\\CreateCodeQues.js":"37","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizPageSub.js":"38","E:\\project\\PlacePrep\\client\\src\\components\\code\\CodeQuestions.js":"39","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeQuizPage.js":"40","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeProblem.js":"41","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizSubmissions.js":"42","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\EditPracticeProblem.js":"43","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\AddTopics.js":"44","E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\Dashboard.js":"45","E:\\project\\PlacePrep\\client\\src\\components\\coding\\CodingSolution.js":"46","E:\\project\\PlacePrep\\client\\src\\components\\code\\paginate.js":"47","E:\\project\\PlacePrep\\client\\src\\components\\code\\Pagination.js":"48","E:\\project\\PlacePrep\\client\\src\\components\\coding\\CodeDescription.js":"49","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizCard.js":"50","E:\\project\\PlacePrep\\client\\src\\components\\coding\\CodeEditor.js":"51","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\CreateQuizQuestion.js":"52","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizOption.js":"53","E:\\project\\PlacePrep\\client\\src\\store\\actions\\codeActions.js":"54","E:\\project\\PlacePrep\\client\\src\\components\\sidebar\\MenuList.js":"55","E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodeSubTabRow.js":"56","E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\DashboardPie.js":"57","E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\DashboardCard.js":"58","E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodeEditorSub.js":"59","E:\\project\\PlacePrep\\client\\src\\store\\actions\\practiceProblemActions.js":"60","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeQuizQues.js":"61","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizSubTabRow.js":"62","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizQuesSub.js":"63","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\CreateAptiQuestion.js":"64","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\AptiTopicsTemplate.js":"65","E:\\project\\PlacePrep\\client\\src\\components\\coding\\RunCodeFail.js":"66","E:\\project\\PlacePrep\\client\\src\\components\\coding\\SubmitCodeSuccess.js":"67","E:\\project\\PlacePrep\\client\\src\\components\\coding\\RunCodeSuccess.js":"68","E:\\project\\PlacePrep\\client\\src\\components\\layout\\MyModal.js":"69","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeQuizOption.js":"70","E:\\project\\PlacePrep\\client\\src\\components\\sidebar\\MenuItemData.js":"71","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\ViewAnswer.js":"72","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizOptionSub.js":"73","E:\\project\\PlacePrep\\client\\src\\components\\code\\CodeTable.js":"74","E:\\project\\PlacePrep\\client\\src\\components\\coding\\defaultCode.js":"75"},{"size":339,"mtime":1614246808381,"results":"76","hashOfConfig":"77"},{"size":292,"mtime":1614246808393,"results":"78","hashOfConfig":"77"},{"size":1990,"mtime":1615201088756,"results":"79","hashOfConfig":"77"},{"size":474,"mtime":1614247961956,"results":"80","hashOfConfig":"77"},{"size":460,"mtime":1614251446785,"results":"81","hashOfConfig":"77"},{"size":2522,"mtime":1614578762668,"results":"82","hashOfConfig":"77"},{"size":5145,"mtime":1614250909080,"results":"83","hashOfConfig":"77"},{"size":6494,"mtime":1615029087745,"results":"84","hashOfConfig":"77"},{"size":656,"mtime":1615017567903,"results":"85","hashOfConfig":"77"},{"size":1834,"mtime":1615017567896,"results":"86","hashOfConfig":"77"},{"size":853,"mtime":1615017567903,"results":"87","hashOfConfig":"77"},{"size":3689,"mtime":1615201089066,"results":"88","hashOfConfig":"77"},{"size":4165,"mtime":1615017567873,"results":"89","hashOfConfig":"77"},{"size":400,"mtime":1614248891434,"results":"90","hashOfConfig":"77"},{"size":4547,"mtime":1615032225195,"results":"91","hashOfConfig":"77"},{"size":5913,"mtime":1615201089149,"results":"92","hashOfConfig":"77"},{"size":4996,"mtime":1615201089148,"results":"93","hashOfConfig":"77"},{"size":6572,"mtime":1615017567959,"results":"94","hashOfConfig":"77"},{"size":428,"mtime":1614420791123,"results":"95","hashOfConfig":"77"},{"size":787,"mtime":1613041950809,"results":"96","hashOfConfig":"77"},{"size":8325,"mtime":1614668200626,"results":"97","hashOfConfig":"77"},{"size":5624,"mtime":1615201089145,"results":"98","hashOfConfig":"77"},{"size":1935,"mtime":1614578762667,"results":"99","hashOfConfig":"77"},{"size":9907,"mtime":1615201089147,"results":"100","hashOfConfig":"77"},{"size":3374,"mtime":1615201089069,"results":"101","hashOfConfig":"77"},{"size":1737,"mtime":1615201089070,"results":"102","hashOfConfig":"77"},{"size":2223,"mtime":1615017567878,"results":"103","hashOfConfig":"77"},{"size":2904,"mtime":1615285495202,"results":"104","hashOfConfig":"77"},{"size":10981,"mtime":1615201089068,"results":"105","hashOfConfig":"77"},{"size":10209,"mtime":1615017567892,"results":"106","hashOfConfig":"77"},{"size":465,"mtime":1615017567878,"results":"107","hashOfConfig":"77"},{"size":7158,"mtime":1615201089065,"results":"108","hashOfConfig":"77"},{"size":2038,"mtime":1615201090870,"results":"109","hashOfConfig":"77"},{"size":8468,"mtime":1615201089062,"results":"110","hashOfConfig":"77"},{"size":1678,"mtime":1615031922736,"results":"111","hashOfConfig":"77"},{"size":2490,"mtime":1615201089063,"results":"112","hashOfConfig":"77"},{"size":16537,"mtime":1615201092784,"results":"113","hashOfConfig":"77"},{"size":2048,"mtime":1615017567899,"results":"114","hashOfConfig":"77"},{"size":6464,"mtime":1615201088933,"results":"115","hashOfConfig":"77"},{"size":3632,"mtime":1615201089067,"results":"116","hashOfConfig":"77"},{"size":1559,"mtime":1615017567884,"results":"117","hashOfConfig":"77"},{"size":11666,"mtime":1615201089142,"results":"118","hashOfConfig":"77"},{"size":6360,"mtime":1615017567882,"results":"119","hashOfConfig":"77"},{"size":9518,"mtime":1615017567880,"results":"120","hashOfConfig":"77"},{"size":6208,"mtime":1615203528138,"results":"121","hashOfConfig":"77"},{"size":1188,"mtime":1615287685003,"results":"122","hashOfConfig":"77"},{"size":211,"mtime":1613991469736,"results":"123","hashOfConfig":"77"},{"size":1217,"mtime":1615028077344,"results":"124","hashOfConfig":"77"},{"size":2126,"mtime":1615199600906,"results":"125","hashOfConfig":"77"},{"size":4294,"mtime":1615201089068,"results":"126","hashOfConfig":"77"},{"size":6967,"mtime":1615202311368,"results":"127","hashOfConfig":"77"},{"size":7856,"mtime":1615017567889,"results":"128","hashOfConfig":"77"},{"size":725,"mtime":1615017567895,"results":"129","hashOfConfig":"77"},{"size":7585,"mtime":1615017567957,"results":"130","hashOfConfig":"77"},{"size":8126,"mtime":1615017567905,"results":"131","hashOfConfig":"77"},{"size":2194,"mtime":1615201089024,"results":"132","hashOfConfig":"77"},{"size":2189,"mtime":1615201089065,"results":"133","hashOfConfig":"77"},{"size":1032,"mtime":1615201089064,"results":"134","hashOfConfig":"77"},{"size":6992,"mtime":1615201088956,"results":"135","hashOfConfig":"77"},{"size":6647,"mtime":1615201089146,"results":"136","hashOfConfig":"77"},{"size":2361,"mtime":1615017567886,"results":"137","hashOfConfig":"77"},{"size":2279,"mtime":1615201089141,"results":"138","hashOfConfig":"77"},{"size":1821,"mtime":1615201089140,"results":"139","hashOfConfig":"77"},{"size":5540,"mtime":1615017567881,"results":"140","hashOfConfig":"77"},{"size":6224,"mtime":1615201089067,"results":"141","hashOfConfig":"77"},{"size":523,"mtime":1614578762819,"results":"142","hashOfConfig":"77"},{"size":1098,"mtime":1614578762819,"results":"143","hashOfConfig":"77"},{"size":1202,"mtime":1615198725413,"results":"144","hashOfConfig":"77"},{"size":1910,"mtime":1614246808263,"results":"145","hashOfConfig":"77"},{"size":1197,"mtime":1614246808356,"results":"146","hashOfConfig":"77"},{"size":2797,"mtime":1615017567904,"results":"147","hashOfConfig":"77"},{"size":1046,"mtime":1615017567887,"results":"148","hashOfConfig":"77"},{"size":1096,"mtime":1615017567898,"results":"149","hashOfConfig":"77"},{"size":3277,"mtime":1615202763326,"results":"150","hashOfConfig":"77"},{"size":428,"mtime":1615202489553,"results":"151","hashOfConfig":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"kwzxpx",{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"154"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"154"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"154"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"154"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"154"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"154"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"154"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"154"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"154"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"154"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"154"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"154"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"154"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"154"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"154"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"154"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"154"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"154"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"E:\\project\\PlacePrep\\client\\src\\index.js",[],["321","322"],"E:\\project\\PlacePrep\\client\\src\\store\\configureStore.js",[],"E:\\project\\PlacePrep\\client\\src\\App.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\reducers\\reducer.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\layout\\Alerts.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\auth\\Resetpassword.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\auth\\Register.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\actions\\authActions.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\routing\\TestRoute.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizPage.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\routing\\PrivateRoute.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\layout\\Home.js",["323"],"import React, { useState } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport \"./styles.css\";\r\nimport SideBar from \"../sidebar/SideBar\";\r\nimport UserProfile from \"../auth/UserProfile\";\r\nimport CreateQuiz from \"../quiz/CreateQuiz\";\r\nimport Coding from \"../coding/Coding\";\r\nimport CodingSub from '../coding/codeSubmission/CodingSub';\r\nimport CodeQuestions from \"../code/CodeQuestions\";\r\nimport CreateCodeQuestion from \"../code/CreateCodeQues\";\r\nimport QuizPage from \"../quiz/QuizPage\";\r\nimport QuizPageSub from '../quiz/quizSubmission/QuizPageSub';\r\nimport QuizCardPage from '../quiz/QuizCardPage';\r\nimport EditQuiz from '../quiz/EditQuiz';\r\nimport QuizSubmissions from '../quiz/quizSubmission/QuizSubmissions';\r\nimport CodeSubmissions from '../coding/codeSubmission/CodeSubmissions';\r\nimport PracticeProblem from '../practiceProblems/PracticeProblem';\r\nimport PracticeQuizPage from '../practiceProblems/PracticeQuizPage';\r\nimport AddTopics from '../practiceProblems/AddTopics';\r\nimport EditPracticeProblem from '../practiceProblems/EditPracticeProblem';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Dashboard from '../dashboard/Dashboard';\r\nimport UserTable from '../dashboard/UserTable';\r\n\r\nconst Home = () => {\r\n    const [sidebarOpen, setSidebarOpen] = useState(true);\r\n\r\n    const toggleSidebarBtn = () => {\r\n        setSidebarOpen(!sidebarOpen);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Navbar onClick={() => toggleSidebarBtn()} />\r\n            <div style={{ display: \"flex\", position: \"relative\", top: \"72px\" }}>\r\n                <SideBar sidebarOpen={sidebarOpen} onClick={() => toggleSidebarBtn()} />\r\n                <div className={\"mainview-container \" + (!sidebarOpen && 'remove-margin')}>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={Dashboard} />\r\n                        <Route path=\"/me\" component={UserProfile} />\r\n                        <Route path=\"/users\" component={UserTable} />\r\n                        <Route path=\"/createQuiz\" component={CreateQuiz} />\r\n                        <Route path=\"/codeQuestions\" component={CodeQuestions} />\r\n                        <Route path=\"/createCodeQuestion\" component={CreateCodeQuestion} />\r\n                        <Route path=\"/quizzes\" component={QuizCardPage} />\r\n                        <Route exact path=\"/editQuiz/:slug\" component={EditQuiz} />\r\n                        {/* <Route exact path=\"/quiz/:slug\" component={QuizPage} /> */}\r\n                        <Route exact path=\"/quizSubmissions\" component={QuizSubmissions} />\r\n                        <Route exact path=\"/quizSubmissions/:quizId\" component={QuizSubmissions} />\r\n                        <Route exact path=\"/quizSubmission/:id\" component={QuizPageSub} />\r\n                        <Route exact path=\"/codeSubmissions\" component={CodeSubmissions} />\r\n                        <Route exact path=\"/codeSubmissions/:codeId\" component={CodeSubmissions} />\r\n                        <Route exact path=\"/codeSubmission/:id\" component={CodingSub} />\r\n                        <Route exact path=\"/practiceProblems\" component={PracticeProblem} />\r\n                        <Route exact path=\"/editpracticeProblem/:id\" component={EditPracticeProblem} />\r\n                        <Route exact path=\"/practiceProblems/:categorySlug/:topicSlug\" component={PracticeQuizPage} />\r\n                        <Route exact path=\"/addTopic\" component={AddTopics} />\r\n                        <Route path=\"/code/:slug\" component={Coding} />\r\n                        <Route\r\n                            path=\"/editCodeQuestion/:slug\"\r\n                            component={CreateCodeQuestion}\r\n                        />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","E:\\project\\PlacePrep\\client\\src\\components\\auth\\Login.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\reducers\\alertReducers.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\reducers\\authReducers.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\reducers\\quizReducers.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\reducers\\practiceProblemReducers.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\reducers\\codeReducers.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\actions\\alertActions.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\auth\\MessagePanel.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\auth\\UserProfile.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\actions\\actionTypes.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\auth\\ResPassModal.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\actions\\quizActions.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizQues.js",["324","325"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Button from 'react-bootstrap/Button';\r\nimport QuizOption from './QuizOption';\r\nimport Spinner from '../layout/Spinner';\r\nimport './quiz.css';\r\nimport { connect } from 'react-redux';\r\nimport { submitQuiz, clrQuizCreateSuccess } from '../../store/actions/quizActions';\r\nimport { clearTestDetails } from '../../store/actions/authActions';\r\nimport { setAlert } from '../../store/actions/alertActions';\r\n\r\nconst QuizQues = (props) => {\r\n    let history = useHistory();\r\n    const { quiz: { isCreated }, submitQuiz, clearTestDetails, setAlert, clrQuizCreateSuccess } = props;\r\n\r\n    useEffect(() => {\r\n        if (isCreated) {\r\n            setAlert('Quiz Submitted.', 'success');\r\n            clrQuizCreateSuccess();\r\n            clearTestDetails();\r\n        }\r\n    }, [isCreated]);\r\n\r\n    let tempUserAnswers;\r\n    useEffect(() => {\r\n        // eslint-disable-next-line\r\n        tempUserAnswers = props.questions.map((ele) => {\r\n            return {\r\n                questionId: ele._id,\r\n                selectedAnswer: ''\r\n            };\r\n        });\r\n        setUserAnswers(tempUserAnswers);\r\n\r\n    }, [tempUserAnswers]);\r\n\r\n    const [userAnswers, setUserAnswers] = useState(null);\r\n\r\n    const handleOptClick = (index, ans) => {\r\n        console.log('clcic', index);\r\n        let tempArr = [...userAnswers];\r\n        tempArr[index] = { ...tempArr[index], selectedAnswer: ans };\r\n        setUserAnswers(tempArr);\r\n    };\r\n\r\n    const handleOnClick = () => {\r\n\r\n        console.log('Submitting');\r\n        submitQuiz(props.quizId, { userAnswers: userAnswers });\r\n        tempUserAnswers = props.questions.map((ele) => {\r\n            return {\r\n                questionId: ele._id,\r\n                selectedAnswer: ''\r\n            };\r\n        });\r\n        setUserAnswers(tempUserAnswers);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            { props.questions.map((ele, index) => (\r\n                userAnswers ? (\r\n                    <Accordion key={index} className='my-2'>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Card.Title>\r\n                                    {`${index + 1}.`} {ele.question}\r\n                                </Card.Title>\r\n                                {ele.answers.map((ansEle, ansIdx) => <QuizOption\r\n                                    key={ansIdx}\r\n                                    onClickFunc={() => handleOptClick(index, ansEle)}\r\n                                    isClicked={ansEle === userAnswers[index].selectedAnswer}\r\n                                    text={ansEle} />)}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Accordion>) :\r\n                    <Spinner key={index} />)\r\n            )}\r\n            <div className=\"text-center\" style={{ width: '200px', margin: 'auto' }}>\r\n                <Button className=\"createquiz mb-4\" ref={props.refProp} onClick={handleOnClick}  >Submit Quiz</Button>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    quiz: state.quiz\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    submitQuiz,\r\n    clearTestDetails,\r\n    setAlert,\r\n    clrQuizCreateSuccess\r\n})(QuizQues);","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizTimer.js",["326"],"import React, { useState, useEffect } from 'react';\r\n\r\nconst QuizTimer = (props) => {\r\n\r\n    let durInSec = Math.round((new Date(props.endAt).getTime() - new Date().getTime()) / 1000);\r\n    let durMin = Math.floor(durInSec / 60);\r\n    let durSec = durInSec % 60;\r\n\r\n    const [countdownDate, setCountdownDate] = useState(new Date(props.endAt).getTime());\r\n    const [timer, setTimer] = useState({\r\n        minutes: durMin,\r\n        seconds: durSec\r\n    });\r\n\r\n    let myInterval;\r\n    useEffect(() => {\r\n        // eslint-disable-next-line\r\n        myInterval = setInterval(() => setNewTime(), 1000);\r\n\r\n        return () => clearInterval(myInterval);\r\n\r\n    }, [timer]);\r\n\r\n    const setNewTime = () => {\r\n        if (timer.seconds <= 0 && timer.minutes <= 0) {\r\n            if(timer.seconds > -6 && timer.minutes > -2){\r\n                props.triggerSubmit();\r\n            }\r\n            return clearInterval(myInterval);\r\n        }\r\n        else if (countdownDate) {\r\n            const currentTime = new Date().getTime();\r\n\r\n            const distanceToDate = countdownDate - currentTime;\r\n\r\n            let minutes = Math.floor(\r\n                (distanceToDate % (1000 * 60 * 60)) / (1000 * 60),\r\n            );\r\n            let seconds = Math.floor((distanceToDate % (1000 * 60)) / 1000);\r\n            setTimer({ minutes, seconds });\r\n        }\r\n    };\r\n\r\n    return (\r\n        (timer.minutes <= 0 && timer.seconds <= 0) ?\r\n            (<span className='time_sec float-right mt-1 pr-1' >Time's Up!</span>)\r\n            :\r\n        (<span className='time_sec float-right mt-1 pr-1' >{timer.minutes < 10 ? `0${timer.minutes}` : timer.minutes}:{timer.seconds < 10 ? `0${timer.seconds}` : timer.seconds}</span>)\r\n    );\r\n};\r\n\r\nexport default QuizTimer;\r\n","E:\\project\\PlacePrep\\client\\src\\components\\layout\\Navbar.js",["327"],"import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from \"../../store/actions/authActions\";\r\n\r\nconst Navbars = (props) => {\r\n    const { logout, onClick } = props;\r\n    const { isAuthenticated, user } = props.auth;\r\n\r\n\r\n    const onlogout = () => {\r\n        logout();\r\n    };\r\n\r\n    const authLinks = (\r\n        <Fragment>\r\n            <span>\r\n                {/* <img className=\"nav__user-img\" src={`/img/users/${user.photo}`} alt={user.name} /> */}\r\n                <img className=\"nav__user-img\" src={`/img/users/${user.photo}`} alt={`${user.photo}`} />\r\n                <span className='user-name'>Hello {user && user.name.split(' ')[0]}</span>\r\n            </span>\r\n            <span className=\"logout-div\">\r\n                <a href=\"#\" onClick={onlogout}>\r\n                    <i className=\"fa fa-sign-out\" aria-hidden=\"true\"></i>\r\n                    <span className=\"hide-sm\"> Logout</span>\r\n                </a>\r\n            </span>\r\n        </Fragment>\r\n    );\r\n    const guestLinks = (\r\n        <Fragment>\r\n            <Link to=\"/register\">Register</Link>\r\n            <Link to=\"/login\">Login</Link>\r\n        </Fragment>\r\n    );\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\r\n            <div id='sidebar-btn' onClick={onClick} >\r\n                <i className='fas fa-bars menu-icon' ></i>\r\n            </div>\r\n            <Navbar.Brand className=\"brand-name\">\r\n                <img\r\n                    alt=\"logo\"\r\n                    src=\"./assets/img/logo.png\"\r\n                    width=\"30\"\r\n                    height=\"30\"\r\n                    className=\"d-inline-block align-top\"\r\n                />{\" \"}\r\n                PlacePrep\r\n            </Navbar.Brand>\r\n            <Navbar.Collapse className=\"justify-content-end\">\r\n                <Navbar.Text>\r\n                    {isAuthenticated ? authLinks : guestLinks}\r\n                </Navbar.Text>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout })(Navbars);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizCardPage.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\CreateQuiz.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\EditQuiz.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\layout\\Spinner.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\UserTable.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\Coding.js",["328"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport \"./Coding.css\";\r\nimport { Row, Col, Tabs, Tab } from \"react-bootstrap\";\r\nimport CodeDescription from \"./CodeDescription\";\r\nimport CodingSolution from \"./CodingSolution\";\r\nimport CodeEditor from \"./CodeEditor\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getQuestion } from \"../../store/actions/codeActions\";\r\nimport Spinner from '../layout/Spinner';\r\n\r\nconst Coding = (props) => {\r\n\r\n    const { getQuestion } = props;\r\n    const { current } = props.code;\r\n    const { slug } = useParams();\r\n\r\n    useEffect(() => {\r\n        getQuestion(slug);\r\n        \r\n\t\t//eslint-disable-next-line\r\n    }, []);\r\n\r\n    const [key, setKey] = useState(\"description\");\r\n\r\n    return (\r\n        <Fragment>\r\n            { current !== null ?\r\n                <Row className=\"coding-container\">\r\n                    <Col>\r\n                        <Tabs className='navTabs' activeKey={key} onSelect={(e) => setKey(e)}>\r\n                            <Tab eventKey=\"description\" title={<span><i className=\"fa fa-list-alt\" aria-hidden=\"true\"></i>Description</span>}>\r\n                                <CodeDescription current={current} />\r\n                            </Tab>\r\n                            {/* {current.solution &&} */}\r\n                            <Tab eventKey=\"solution\" title={<span><i className=\"fa fa-flask\" aria-hidden=\"true\"></i>Solution</span>}>\r\n                                <CodingSolution solution={current.solution} />\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Col>\r\n                    <Col className=\"editor-container\">\r\n                        <CodeEditor slugProp={slug} inputs={current.noOfInputs} quesId={current._id} />\r\n                    </Col>\r\n                </Row> : <Spinner />}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    code: state.code\r\n});\r\n\r\nexport default connect(mapStateToProps, { getQuestion })(Coding);","E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodeSubmissions.js",["329","330"],"import React, { useEffect, Fragment, useState, useRef } from 'react';\r\nimport \"../../code/CodeQuestDisp.css\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport CodeSubTabRow from './CodeSubTabRow';\r\nimport Spinner from '../../layout/Spinner';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\nimport Pagination from '../../code/Pagination';\r\nimport paginate from '../../code/paginate';\r\nimport {\r\n    getCodeSubmissions,\r\n    filterCodeSubmissions,\r\n    clearFilterCodeSub,\r\n} from '../../../store/actions/codeActions';\r\n\r\nconst CodeSubmissions = (props) => {\r\n    const { auth: { user },\r\n        code: { submissions, filteredSubmissions },\r\n        getCodeSubmissions,\r\n        filterCodeSubmissions,\r\n        clearFilterCodeSub,\r\n        match } = props;\r\n\r\n    const text = useRef('');\r\n\r\n    const [pageDetails, setPageDetails] = useState({\r\n        pageSize: 10,\r\n        currentPage: 1,\r\n        sortColumn: { path: \"submittedAt\", order: \"asc\" },\r\n    });\r\n    const { pageSize, currentPage, sortColumn } = pageDetails;\r\n\r\n\r\n    const { codeId } = match.params;\r\n\r\n    useEffect(() => {\r\n        if (user?.role === 'student') {\r\n            getCodeSubmissions({ user: user._id });\r\n        }\r\n        else if (user?.role === 'faculty') {\r\n            getCodeSubmissions({ code: codeId });\r\n        }\r\n        return () => {\r\n        };\r\n    }, [user]);\r\n\r\n    if (submissions !== null && submissions.length === 0) {\r\n        return <h4>Currently There are No Code Submissions.</h4>;\r\n    }\r\n\r\n    const handleFilterChange = (e) => {\r\n        if (text.current.value !== \"\") {\r\n            filterCodeSubmissions(e.target.value, user?.role === 'student' ? true : false);\r\n        } else {\r\n            clearFilterCodeSub();\r\n        }\r\n    };\r\n\r\n    const handlePageChange = (page) => {\r\n        setPageDetails({ ...pageDetails, currentPage: page });\r\n    };\r\n\r\n    const handleOnChange = (e) => {\r\n        setPageDetails({ ...pageDetails, pageSize: e.target.value });\r\n    };\r\n\r\n    const handleSort = (path) => {\r\n        const sortColumn = { ...pageDetails.sortColumn };\r\n        if (sortColumn.path === path)\r\n            sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\r\n        else {\r\n            sortColumn.path = path;\r\n            sortColumn.order = \"asc\";\r\n        }\r\n        setPageDetails({ ...pageDetails, sortColumn });\r\n    };\r\n\r\n    const filteredSub = filteredSubmissions !== null ? filteredSubmissions : submissions;\r\n\r\n    const sortedSub = _.orderBy(\r\n        filteredSub,\r\n        [\r\n            function (item) {\r\n                if (sortColumn.path === \"status\") {\r\n                    return item.status;\r\n                }\r\n                else if (sortColumn.path === 'name') {\r\n                    return item.user.name;\r\n                }\r\n                else if (sortColumn.path === 'submittedAt') {\r\n                    return new Date(item.createdAt).getTime();\r\n                }\r\n                else if (sortColumn.path === 'language') {\r\n                    return item.language;\r\n                }\r\n                else if (sortColumn.path === 'title') {\r\n                    return item.question.title;\r\n                }\r\n                else {\r\n                    return item.user.name.toLowerCase();\r\n                };\r\n\r\n            },\r\n        ],\r\n        [sortColumn.order]\r\n    );\r\n\r\n    const newSubmissions = paginate(sortedSub, currentPage, pageSize);\r\n    const subNumber = _.range(1, newSubmissions.length + 1);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            {submissions !== null ? (<Container className=\"container-codeQuest\">\r\n                <h3 className=\"text-center  mb-2 pt-4 \">\r\n                    Code Submissions\r\n        </h3>\r\n                <div className=\"title-border mb-4\">\r\n                    <span></span>\r\n                </div>\r\n                <div className=\"displayQuest pb-2\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 pb-2\">\r\n                            <Form>\r\n                                <Form.Group controlId=\"codingquestionSearch\">\r\n                                    <Form.Control\r\n                                        className=\" codingQuestSearch\"\r\n                                        type=\"text\"\r\n                                        ref={text}\r\n                                        placeholder=\"Search submissions\"\r\n                                        onChange={handleFilterChange}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </div>\r\n                    </div>\r\n                    <div className='table-responsive' >\r\n                        <table className=\"table  \">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">#</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(`${user?.role === 'student' ? 'title' : 'name'}`)}>{user?.role === 'student' ? 'Title' : 'Name'}</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(\"submittedAt\")} >Submitted At</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(\"language\")} >Language</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(\"status\")} >Status</th>\r\n                                    {user?.role === 'student' && <th scope=\"col\">Operation</th>}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"tbodyCode\">\r\n                                {/* {submissions.map((ele, index) => <QuizSubTabRow key={ele._id} name={ele.user.name} eleObj={ele} idx={index} />)} */}\r\n                                {newSubmissions.map((ele, index) => <CodeSubTabRow key={ele._id} name={ele.user.name} eleObj={ele} idx={index} />)}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"ml-3 \">\r\n                            <Form>\r\n                                <Form.Group controlId=\"SelectRowsPerpage\">\r\n                                    <Form.Control\r\n                                        as=\"select\"\r\n                                        className=\"dispCode-inputFiled rowsPerPg\"\r\n                                        value={pageSize}\r\n                                        onChange={handleOnChange}\r\n                                    >\r\n                                        <option value={10} className=\"optionSelect\">\r\n                                            10\r\n                                </option>\r\n                                        <option value={25} className=\"optionSelect\">\r\n                                            25\r\n                                </option>\r\n                                        <option value={50} className=\"optionSelect\">\r\n                                            50\r\n                                </option>\r\n                                        <option value={100} className=\"optionSelect\">\r\n                                            100\r\n                                </option>\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </div>\r\n                        <span className=\"labelRowsPerPg mt-2 col-4\">\r\n                            rows per page.\r\n                </span>\r\n                        <Pagination\r\n                            itemCounts={filteredSub.length}\r\n                            pageSize={pageSize}\r\n                            currentPage={currentPage}\r\n                            onPageChange={handlePageChange}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Container>) :\r\n                (\r\n                    <Spinner />\r\n                )\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    code: state.code,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getCodeSubmissions,\r\n    filterCodeSubmissions,\r\n    clearFilterCodeSub\r\n})(CodeSubmissions);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\sidebar\\SideBar.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodingSub.js",["331"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport \"../Coding.css\";\r\nimport { Row, Col, Tabs, Tab } from \"react-bootstrap\";\r\nimport CodeDescription from \"../CodeDescription\";\r\nimport CodingSolution from \"../CodingSolution\";\r\nimport CodeEditorSub from \"./CodeEditorSub\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCodeSubmission } from \"../../../store/actions/codeActions\";\r\nimport Spinner from '../../layout/Spinner';\r\n\r\nconst CodingSub = (props) => {\r\n\r\n    const { getCodeSubmission } = props;\r\n    const { currentSubmission } = props.code;\r\n    const { id } = useParams();\r\n\r\n    useEffect(() => {\r\n        getCodeSubmission(id);\r\n    }, []);\r\n\r\n    const [key, setKey] = useState(\"description\");\r\n\r\n    return (\r\n        <Fragment>\r\n            { currentSubmission !== null ?\r\n                <Row className=\"coding-container\">\r\n                    <Col>\r\n                        <Tabs className='navTabs' activeKey={key} onSelect={(e) => setKey(e)}>\r\n                            <Tab eventKey=\"description\" title={<span><i className=\"fa fa-list-alt\" aria-hidden=\"true\"></i>Description</span>}>\r\n                                <CodeDescription current={currentSubmission.question} />\r\n                            </Tab>\r\n                            {/* {current.solution &&} */}\r\n                            <Tab eventKey=\"solution\" title={<span><i className=\"fa fa-flask\" aria-hidden=\"true\"></i>Solution</span>}>\r\n                                <CodingSolution current={currentSubmission.question} />\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Col>\r\n                    <Col className=\"editor-container\">\r\n                        <CodeEditorSub\r\n                            key={currentSubmission.userSolution}\r\n                            slugProp={currentSubmission.question.slug}\r\n                            userSolution={currentSubmission.userSolution}\r\n                            language={currentSubmission.language}\r\n                            inputs={currentSubmission.question.noOfInputs}\r\n                            quesId={currentSubmission.question._id} />\r\n                    </Col>\r\n                </Row> : <Spinner />}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    code: state.code\r\n});\r\n\r\nexport default connect(mapStateToProps, { getCodeSubmission })(CodingSub);","E:\\project\\PlacePrep\\client\\src\\components\\code\\CreateCodeQues.js",["332"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./createCode.css\";\r\nimport { Button, Container, Form } from \"react-bootstrap\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    addQuestion,\r\n    getQuestion,\r\n    updateQuestion,\r\n    clearCurrent,\r\n    clearCodeErrors,\r\n    clrCodeCreateSuccess\r\n} from \"../../store/actions/codeActions\";\r\nimport { setAlert } from \"../../store/actions/alertActions\";\r\n\r\nconst CreateCodeQuestion = (props) => {\r\n    const {\r\n        addQuestion,\r\n        getQuestion,\r\n        updateQuestion,\r\n        clearCurrent,\r\n        clearCodeErrors,\r\n        clrCodeCreateSuccess,\r\n        setAlert,\r\n    } = props;\r\n    const { current, error, isCreated } = props.code;\r\n    const [codeQuestion, setCodeQuestion] = useState({\r\n        title: \"\",\r\n        difficulty: \"10\",\r\n        description: \"\",\r\n        testcases: \"\",\r\n        sampleInputs: [],\r\n        solution: \"\",\r\n        noOfInputs: \"\"\r\n    });\r\n    const [lastId, setLastId] = useState(0);\r\n    const [clickSubmit, setClickSubmit] = useState(false);\r\n    const [sampleArray, setSampleArray] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (props.match.path.includes(\"editCodeQuestion\")) {\r\n            getQuestion(props.match.params.slug);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isCreated) {\r\n            if (props.match.path.includes(\"editCodeQuestion\")) {\r\n                setAlert('Question has been updated.', 'success');\r\n            }\r\n            else {\r\n                setAlert('Question has been created.', 'success');\r\n                setCodeQuestion({\r\n                    title: \"\",\r\n                    difficulty: \"10\",\r\n                    description: \"\",\r\n                    testcases: \"\",\r\n                    sampleInputs: [],\r\n                    solution: \"\",\r\n                    noOfInputs: \"\"\r\n                });\r\n                setSampleArray([]);\r\n            }\r\n            clrCodeCreateSuccess();\r\n        }\r\n\r\n        //eslint-disable-next-line\r\n    }, [isCreated]);\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            setAlert(error, \"danger\");\r\n            clearCodeErrors();\r\n        }\r\n        if (current !== null && props.match.path.includes(\"editCodeQuestion\")) {\r\n            props.history.replace({\r\n                pathname: `/editCodeQuestion/${current.slug}`,\r\n            });\r\n            setCodeQuestion(current);\r\n            if (current.sampleInputs) {\r\n                const newArray = current.sampleInputs.map((curr) => ({\r\n                    ...curr,\r\n                }));\r\n                setSampleArray(newArray);\r\n                setLastId(current.sampleInputs.length - 1);\r\n            }\r\n        } else {\r\n            clearCurrent();\r\n            if (\r\n                props.match.path.includes(\"createCodeQuestion\") &&\r\n                codeQuestion.title !== \"\" &&\r\n                current === null &&\r\n                !clickSubmit\r\n            ) {\r\n\r\n                setCodeQuestion({\r\n                    title: \"\",\r\n                    difficulty: \"10\",\r\n                    description: \"\",\r\n                    testcases: \"\",\r\n                    sampleInputs: [],\r\n                    solution: \"\",\r\n                    noOfInputs: \"\"\r\n                });\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [current, error, props.match.path]);\r\n\r\n    const handleAddSampleClick = () => {\r\n        const newSampleObj = {\r\n            id: lastId + 1,\r\n            sampleInput: \"\",\r\n            sampleOutput: \"\",\r\n        };\r\n        setLastId(lastId + 1);\r\n\r\n        const newSampleArray = [...sampleArray, newSampleObj];\r\n        setSampleArray(newSampleArray);\r\n    };\r\n\r\n    const handleOnSampleChange = (e, index) => {\r\n        const newSampleArray = [...sampleArray];\r\n        newSampleArray[index][e.target.name] = e.target.value;\r\n\r\n        setSampleArray(newSampleArray);\r\n    };\r\n\r\n    const handleDeleteSample = (e, eleId) => {\r\n        const newSampleArray = sampleArray.filter((ele) => {\r\n            return ele.id !== eleId;\r\n        });\r\n        setSampleArray(newSampleArray);\r\n    };\r\n\r\n    const handleOnChange = (e) => {\r\n        setCodeQuestion({\r\n            ...codeQuestion,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        setClickSubmit(true);\r\n        if (\r\n            codeQuestion.title === \"\" ||\r\n            codeQuestion.description === \"\" ||\r\n            codeQuestion.testcases === \"\" ||\r\n            codeQuestion.noOfInputs === \"\"\r\n        ) {\r\n            setAlert(\"Please enter all fields\", \"danger\");\r\n        } else {\r\n            let temp = JSON.parse(JSON.stringify(codeQuestion));\r\n            temp.sampleInputs = sampleArray;\r\n\r\n            setCodeQuestion({ ...codeQuestion, sampleInputs: sampleArray });\r\n\r\n            current !== null\r\n                ? updateQuestion(temp)\r\n                : addQuestion(temp);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container className=\"container-createCodeQuest\">\r\n            <h3 className=\"text-center mb-2 pt-4 \">{props.match.path.includes(\"editCodeQuestion\") ? 'Edit' : 'Create'} Coding Question</h3>\r\n            <div className=\"title-border mb-4\">\r\n                <span></span>\r\n            </div>\r\n            <div className=\"codequestForm \">\r\n                <Form encType=\"multipart/form-data\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <Form.Group controlId=\"quiztitle\">\r\n                                <Form.Label>\r\n                                    <b>Title</b>\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    className=\"createC-inputFiled\"\r\n                                    type=\"text\"\r\n                                    name=\"title\"\r\n                                    placeholder=\"Enter Title\"\r\n                                    value={codeQuestion.title}\r\n                                    onChange={handleOnChange}\r\n                                />\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <Form.Group controlId=\"quiztitle\">\r\n                                <Form.Label>\r\n                                    <b>Description</b>\r\n                                </Form.Label>\r\n                                <TextareaAutosize\r\n                                    className=\"createC-inputFiled questiontextarea\"\r\n                                    placeholder=\"Provide Description....\"\r\n                                    name=\"description\"\r\n                                    value={codeQuestion.description}\r\n                                    onChange={handleOnChange}\r\n                                ></TextareaAutosize>\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                    <hr></hr>\r\n\r\n                    <h3 className=\"text-center  mb-2 pt-1 \">Add Samples</h3>\r\n                    <div className=\"title-border mb-4\">\r\n                        <span></span>\r\n                    </div>\r\n                    {/* Sampless starts from below */}\r\n                    {sampleArray.map((ele, index) => {\r\n                        return (\r\n                            <div className=\"\" key={ele.id}>\r\n                                <div className=\"row \">\r\n                                    <div className=\"col-sm-6\">\r\n                                        <Form.Group controlId=\"quiztitle\">\r\n                                            <Form.Label>\r\n                                                <b>Sample Input</b>\r\n                                            </Form.Label>\r\n                                            <TextareaAutosize\r\n                                                className=\"createC-inputFiled questiontextarea\"\r\n                                                placeholder=\"\"\r\n                                                name=\"sampleInput\"\r\n                                                value={ele.sampleInput}\r\n                                                onChange={(e) =>\r\n                                                    handleOnSampleChange(\r\n                                                        e,\r\n                                                        index\r\n                                                    )\r\n                                                }\r\n                                            ></TextareaAutosize>\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                    <div className=\"col-sm-6\">\r\n                                        <Form.Group controlId=\"quiztitle\">\r\n                                            <Form.Label>\r\n                                                <b>Sample Output</b>\r\n                                            </Form.Label>\r\n                                            <TextareaAutosize\r\n                                                className=\"createC-inputFiled questiontextarea\"\r\n                                                placeholder=\"\"\r\n                                                name=\"sampleOutput\"\r\n                                                value={ele.sampleOutput}\r\n                                                onChange={(e) =>\r\n                                                    handleOnSampleChange(\r\n                                                        e,\r\n                                                        index\r\n                                                    )\r\n                                                }\r\n                                            ></TextareaAutosize>\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row \">\r\n                                    <div className=\"col-sm-12 \">\r\n                                        <Button\r\n                                            className=\"delsamplebtn mb-2\"\r\n                                            onClick={(e) =>\r\n                                                handleDeleteSample(e, ele.id)\r\n                                            }\r\n                                        >\r\n                                            {\" \"}\r\n                                            Delete{\" \"}\r\n                                        </Button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n\r\n                    {/* samples end here */}\r\n                    <div className=\" text-center\">\r\n                        <Button\r\n                            className=\" addsample mt-3\"\r\n                            onClick={handleAddSampleClick}\r\n                        >\r\n                            {\" \"}\r\n                            Add Examples{\" \"}\r\n                        </Button>\r\n                    </div>\r\n                    <hr></hr>\r\n\r\n                    <h3 className=\"text-center  mb-2 pt-1 \">Add TestCases</h3>\r\n                    <div className=\"title-border mb-4\">\r\n                        <span></span>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <Form.Group controlId=\"quiztitle\">\r\n                                <TextareaAutosize\r\n                                    className=\"createC-inputFiled questiontextarea \"\r\n                                    minRows=\"2\"\r\n                                    placeholder=\"\"\r\n                                    name=\"testcases\"\r\n                                    value={codeQuestion.testcases}\r\n                                    onChange={handleOnChange}\r\n                                ></TextareaAutosize>\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                    <hr className=\"mt-2\"></hr>\r\n\r\n                    <div className=\"row pt-2 pb-3\">\r\n                        <div className=\"col-sm-12\">\r\n                            <Form.Label>\r\n                                <b className=\"mr-2\">Solution </b>\r\n                            </Form.Label>\r\n                            <TextareaAutosize\r\n                                className=\"createC-inputFiled questiontextarea \"\r\n                                minRows=\"2\"\r\n                                placeholder=\"\"\r\n                                name=\"solution\"\r\n                                value={codeQuestion.solution}\r\n                                onChange={handleOnChange}\r\n                            ></TextareaAutosize>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"row pt-2 pb-3\">\r\n                        <div className=\"col-sm-2 pt-1 difflabel\">\r\n                            <Form.Label>\r\n                                <b className=\"\">No. of inputs</b>\r\n                            </Form.Label>\r\n                        </div>\r\n                        <div className=\"col-sm-4\">\r\n                            <Form.Group controlId=\"noOfInputs\" >\r\n                                <Form.Control className=\"quiz-inputFiled quizDuration\" name=\"noOfInputs\" value={codeQuestion.noOfInputs} onChange={handleOnChange} type=\"number\" placeholder=\"\" />\r\n                            </Form.Group>\r\n                        </div>\r\n                        <div className=\"col-sm-2 pt-1 difflabel\">\r\n                            <Form.Label>\r\n                                <b className=\"\"> Set Difficulty </b>\r\n                            </Form.Label>\r\n                        </div>\r\n                        <div className=\"col-sm-4\">\r\n                            <Form.Group controlId=\"SelectDifficulty\">\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    name=\"difficulty\"\r\n                                    className=\"createC-inputFiled diffdrop \"\r\n                                    value={codeQuestion.difficulty}\r\n                                    onChange={handleOnChange}\r\n                                >\r\n                                    <option\r\n                                        value={\"10\"}\r\n                                        className=\"optionSelect\"\r\n                                    >\r\n                                        Easy\r\n                                    </option>\r\n                                    <option\r\n                                        value={\"20\"}\r\n                                        className=\"optionSelect\"\r\n                                    >\r\n                                        Medium\r\n                                    </option>\r\n                                    <option\r\n                                        value={\"30\"}\r\n                                        className=\"optionSelect\"\r\n                                    >\r\n                                        Hard\r\n                                    </option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\" text-center\">\r\n                        <Button\r\n                            className=\"createquestbtn mb-4\"\r\n                            onClick={handleOnSubmit}\r\n                        >\r\n                            {current !== null\r\n                                ? \" Edit Question \"\r\n                                : \" Create Question \"}\r\n                        </Button>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    code: state.code,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    addQuestion,\r\n    getQuestion,\r\n    updateQuestion,\r\n    clearCurrent,\r\n    clearCodeErrors,\r\n    clrCodeCreateSuccess,\r\n    setAlert,\r\n})(CreateCodeQuestion);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizPageSub.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\code\\CodeQuestions.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeQuizPage.js",["333"],"import React, { useEffect } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport PracticeQuizQues from './PracticeQuizQues';\r\nimport Spinner from '../layout/Spinner';\r\nimport { connect } from 'react-redux';\r\nimport { getPracticeProblems, clrPracProbDeleteSuccess } from '../../store/actions/practiceProblemActions';\r\nimport { setAlert } from '../../store/actions/alertActions';\r\n\r\nconst QuizPage = (props) => {\r\n    const {\r\n        practiceProblem: { questions, isDeleted },\r\n        getPracticeProblems,\r\n        clrPracProbDeleteSuccess,\r\n        setAlert,\r\n        match\r\n    } = props;\r\n    const { categorySlug, topicSlug } = match.params;\r\n    console.log('params', match.params);\r\n\r\n    useEffect(() => {\r\n        getPracticeProblems(categorySlug, topicSlug);\r\n        // loadUser(false, true);\r\n\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isDeleted) {\r\n            setAlert('Problem Deleted', 'success');\r\n            clrPracProbDeleteSuccess();\r\n        }\r\n    }, [isDeleted]);\r\n\r\n    return (\r\n        <>\r\n            { questions ?\r\n                (<Container className='mt-3'>\r\n                    <Card.Header className='quiz_header'>\r\n                        <Row >\r\n                            <Col lg={9} md={8} sm={7} xs={8} className='quiz_title_col' >\r\n                                <div  >{questions[0]?.topic}</div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Card.Header>\r\n                    <PracticeQuizQues key={0} questions={questions} />\r\n                </Container>)\r\n                :\r\n                <Spinner />\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    practiceProblem: state.practiceProblem,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getPracticeProblems,\r\n    clrPracProbDeleteSuccess,\r\n    setAlert\r\n})(QuizPage);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeProblem.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizSubmissions.js",["334","335"],"import React, { useEffect, Fragment, useState, useRef } from 'react';\r\nimport \"../../code/CodeQuestDisp.css\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport QuizSubTabRow from './QuizSubTabRow';\r\nimport Spinner from '../../layout/Spinner';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\nimport Pagination from '../../code/Pagination';\r\nimport paginate from '../../code/paginate';\r\nimport {\r\n    getQuizSubmissions,\r\n    getQuizSubmission,\r\n    filterQuizSubmissions,\r\n    clearFilterQuizSub\r\n} from '../../../store/actions/quizActions';\r\n\r\nconst QuizSubmissions = (props) => {\r\n    const { auth: { user },\r\n        quiz: { submissions, filteredSubmissions },\r\n        getQuizSubmissions,\r\n        filterQuizSubmissions,\r\n        clearFilterQuizSub,\r\n        match } = props;\r\n\r\n    const text = useRef('');\r\n\r\n    const [pageDetails, setPageDetails] = useState({\r\n        pageSize: 10,\r\n        currentPage: 1,\r\n        sortColumn: { path: \"submittedAt\", order: \"asc\" },\r\n    });\r\n    const { pageSize, currentPage, sortColumn } = pageDetails;\r\n\r\n\r\n    const { quizId } = match.params;\r\n\r\n    useEffect(() => {\r\n        if (user?.role === 'student') {\r\n            getQuizSubmissions({ user: user._id });\r\n        }\r\n        else if (user?.role === 'faculty') {\r\n            getQuizSubmissions({ quiz: quizId });\r\n        }\r\n        return () => {\r\n        };\r\n\r\n        // eslint-disable-next-line\r\n    }, [user]);\r\n\r\n    if (submissions !== null && submissions.length === 0) {\r\n        return <h4>Currently There are No Quiz Submissions.</h4>;\r\n    }\r\n\r\n    const handleFilterChange = (e) => {\r\n        if (text.current.value !== \"\") {\r\n            filterQuizSubmissions(e.target.value, user?.role === 'student' ? true : false);\r\n        } else {\r\n            clearFilterQuizSub();\r\n        }\r\n    };\r\n\r\n    const handlePageChange = (page) => {\r\n        setPageDetails({ ...pageDetails, currentPage: page });\r\n    };\r\n\r\n    const handleOnChange = (e) => {\r\n        setPageDetails({ ...pageDetails, pageSize: e.target.value });\r\n    };\r\n\r\n    const handleSort = (path) => {\r\n        const sortColumn = { ...pageDetails.sortColumn };\r\n        if (sortColumn.path === path)\r\n            sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\r\n        else {\r\n            sortColumn.path = path;\r\n            sortColumn.order = \"asc\";\r\n        }\r\n        setPageDetails({ ...pageDetails, sortColumn });\r\n    };\r\n\r\n    const filteredSub = filteredSubmissions !== null ? filteredSubmissions : submissions;\r\n\r\n    const sortedSub = _.orderBy(\r\n        filteredSub,\r\n        [\r\n            function (item) {\r\n                if (sortColumn.path === \"score\") {\r\n                    return item.score;\r\n                }\r\n                else if (sortColumn.path === 'name') {\r\n                    return item.user.name;\r\n                }\r\n                else if (sortColumn.path === 'submittedAt') {\r\n                    return new Date(item.createdAt).getTime();\r\n                }\r\n                else if (sortColumn.path === 'timeTaken') {\r\n                    let min = item.timeTaken.minutes;\r\n                    let sec = item.timeTaken.seconds;\r\n                    let totTimeInSec = (min * 60) + sec;\r\n                    return totTimeInSec;\r\n                }\r\n                else if (sortColumn.path === 'title') {\r\n                    return item.quiz.title;\r\n                }\r\n                else {\r\n                    return item.user.name.toLowerCase();\r\n                };\r\n\r\n            },\r\n        ],\r\n        [sortColumn.order]\r\n    );\r\n\r\n    const newSubmissions = paginate(sortedSub, currentPage, pageSize);\r\n    // const subNumber = _.range(1, newSubmissions.length + 1);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            {submissions !== null ? (<Container className=\"container-codeQuest\">\r\n                <h3 className=\"text-center  mb-2 pt-4 \">\r\n                    Quiz Submissions\r\n        </h3>\r\n                <div className=\"title-border mb-4\">\r\n                    <span></span>\r\n                </div>\r\n                <div className=\"displayQuest pb-2\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 pb-2\">\r\n                            <Form>\r\n                                <Form.Group controlId=\"codingquestionSearch\">\r\n                                    <Form.Control\r\n                                        className=\" codingQuestSearch\"\r\n                                        type=\"text\"\r\n                                        ref={text}\r\n                                        placeholder=\"Search submissions\"\r\n                                        onChange={handleFilterChange}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </div>\r\n                    </div>\r\n                    <div className='table-responsive' >\r\n                        <table className=\"table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">#</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(`${user?.role === 'student' ? 'title' : 'name'}`)}>{user?.role === 'student' ? 'Title' : 'Name'}</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(\"submittedAt\")} >Submitted At</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(\"timeTaken\")} >Time Taken</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(\"score\")} >Score</th>\r\n                                    {(user?.role === 'faculty' || user?.role === 'admin') && <th scope=\"col\">Operation</th>}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"tbodyCode\">\r\n                                {/* {submissions.map((ele, index) => <QuizSubTabRow key={ele._id} name={ele.user.name} eleObj={ele} idx={index} />)} */}\r\n                                {newSubmissions.map((ele, index) => <QuizSubTabRow key={ele._id} name={ele.user.name} eleObj={ele} idx={index} />)}\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"ml-3 \">\r\n                            <Form>\r\n                                <Form.Group controlId=\"SelectRowsPerpage\">\r\n                                    <Form.Control\r\n                                        as=\"select\"\r\n                                        className=\"dispCode-inputFiled rowsPerPg\"\r\n                                        value={pageSize}\r\n                                        onChange={handleOnChange}\r\n                                    >\r\n                                        <option value={10} className=\"optionSelect\">\r\n                                            10\r\n                                </option>\r\n                                        <option value={25} className=\"optionSelect\">\r\n                                            25\r\n                                </option>\r\n                                        <option value={50} className=\"optionSelect\">\r\n                                            50\r\n                                </option>\r\n                                        <option value={100} className=\"optionSelect\">\r\n                                            100\r\n                                </option>\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </div>\r\n                        <span className=\"labelRowsPerPg mt-2 col-4\">\r\n                            rows per page.\r\n                </span>\r\n                        <Pagination\r\n                            itemCounts={filteredSub.length}\r\n                            pageSize={pageSize}\r\n                            currentPage={currentPage}\r\n                            onPageChange={handlePageChange}\r\n                        />\r\n\r\n                        <div className=\" paginatt \">\r\n                            <nav aria-label=\"Page navigation example\">\r\n                                <ul className=\"pagination nav2\">\r\n                                    <li className=\"\">\r\n                                        <a\r\n                                            className=\"page-link\"\r\n                                            href=\"#\"\r\n                                            aria-label=\"Previous\"\r\n                                        >\r\n                                            <span\r\n                                                aria-hidden=\"true\"\r\n                                                className=\"pagntColor\"\r\n                                            >\r\n                                                &laquo;\r\n                                    </span>\r\n                                        </a>\r\n                                    </li>\r\n                                    <li className=\" \">\r\n                                        <a\r\n                                            className=\"page-link pagntColor\"\r\n                                            href=\"#1\"\r\n                                        >\r\n                                            1\r\n                                </a>\r\n                                    </li>\r\n                                    <li className=\"active\">\r\n                                        <a\r\n                                            className=\"page-link pagntColor \"\r\n                                            href=\"#2\"\r\n                                        >\r\n                                            2\r\n                                </a>\r\n                                    </li>\r\n                                    <li className=\" \">\r\n                                        <a\r\n                                            className=\"page-link pagntColor \"\r\n                                            href=\"#3\"\r\n                                        >\r\n                                            3\r\n                                </a>\r\n                                    </li>\r\n                                    <li className=\"\">\r\n                                        <a\r\n                                            className=\"page-link\"\r\n                                            href=\"#\"\r\n                                            aria-label=\"Next\"\r\n                                        >\r\n                                            <span\r\n                                                aria-hidden=\"true\"\r\n                                                className=\"pagntColor\"\r\n                                            >\r\n                                                &raquo;\r\n                                    </span>\r\n                                        </a>\r\n                                    </li>\r\n                                </ul>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Container>) :\r\n                (\r\n                    <Spinner />\r\n                )\r\n            }\r\n        </Fragment >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    quiz: state.quiz,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getQuizSubmissions,\r\n    getQuizSubmission,\r\n    filterQuizSubmissions,\r\n    clearFilterQuizSub,\r\n})(QuizSubmissions);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\EditPracticeProblem.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\AddTopics.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\Dashboard.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\CodingSolution.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\code\\paginate.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\code\\Pagination.js",["336"],"import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nconst Pagination = (props) => {\r\n    const { itemCounts, pageSize, currentPage, onPageChange } = props;\r\n    const pageCounts = Math.ceil(itemCounts / pageSize);\r\n    if (pageCounts === 1) return null;\r\n    const pages = _.range(1, pageCounts + 1);\r\n\r\n    return (\r\n        <div className=\" paginatt \">\r\n            <nav aria-label=\"Page navigation example\">\r\n                <ul className=\"pagination nav2\">\r\n                    {pages.map((page) => (\r\n                        <li\r\n                            key={page}\r\n                            className={currentPage === page ? \"active\" : \" \"}\r\n                        >\r\n                            <a\r\n                                className=\"page-link pagntColor\"\r\n                                href=\"#\"\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={() => onPageChange(page)}\r\n                            >\r\n                                {page}\r\n                            </a>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","E:\\project\\PlacePrep\\client\\src\\components\\coding\\CodeDescription.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizCard.js",["337"],"import React, { useEffect } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { Link } from 'react-router-dom';\r\nimport './quiz.css';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    updateQuiz,\r\n    deleteQuiz,\r\n    startQuiz,\r\n    clrQuizDeleteSuccess\r\n} from '../../store/actions/quizActions';\r\nimport { setUserNull, setTestDetails } from '../../store/actions/authActions';\r\nimport { setAlert } from '../../store/actions/alertActions';\r\n\r\nconst QuizCard = (props) => {\r\n    const {\r\n        quiz: { isDeleted },\r\n        auth: { user },\r\n        quizObj,\r\n        updateQuiz,\r\n        setUserNull,\r\n        deleteQuiz,\r\n        setTestDetails,\r\n        startQuiz,\r\n        clrQuizDeleteSuccess,\r\n        setAlert } = props;\r\n\r\n    useEffect(() => {\r\n        if (isDeleted) {\r\n            setAlert('Quiz Deleted', 'success');\r\n            clrQuizDeleteSuccess();\r\n        }\r\n    }, [isDeleted]);\r\n\r\n    const handleOnClick = () => {\r\n        setUserNull();\r\n        startQuiz(quizObj._id);\r\n        setTestDetails({\r\n            type: 'quiz',\r\n            test: quizObj.slug\r\n        });\r\n        // loadUser(false, true);\r\n    };\r\n\r\n    return (\r\n        <Card className='quiz_card'>\r\n            <Card.Header className='quiz_card_header text-center'>\r\n                <h3>{quizObj.title}</h3>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Table className='quiz_card_table text-center' >\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Category</th>\r\n                            <th scope=\"col\">Topics</th>\r\n                            <th scope=\"col\">Questions</th>\r\n                            <th scope=\"col\">Duration</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>{quizObj.category}</td>\r\n                            <td>{quizObj.topic}</td>\r\n                            <td>{quizObj.questions.length}</td>\r\n                            <td>{quizObj.duration} Minutes</td>\r\n                        </tr>\r\n                        <tr>\r\n\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n\r\n                {user.role === 'student' &&\r\n                    <div className='text-center' >\r\n                        <Link to={`/quiz/${quizObj.slug}`} onClick={handleOnClick} className=\"btn btn-primary start_quiz_btn mr-2\" >Start Quiz</Link>\r\n                    </div>}\r\n\r\n                {(user.role === 'faculty' || user.role === 'admin') &&\r\n                    <div className='text-center' >\r\n                        <Link to={`/editQuiz/${quizObj.slug}`} className=\"btn btn-primary start_quiz_btn mr-2\" >Edit</Link>\r\n                        <button onClick={() => deleteQuiz(quizObj._id)} className=\"btn btn-primary start_quiz_btn mr-2\" >Delete</button>\r\n                        <button onClick={() => updateQuiz({ _id: quizObj._id, active: !quizObj.active })} className=\"btn btn-primary start_quiz_btn mr-2\" >{quizObj.active ? 'Deactivate' : 'Activate'}</button>\r\n                    </div>\r\n                }\r\n            </Card.Body>\r\n            <Card.Footer className='quiz_card_footer' style={{ backgroundColor: 'white' }}>\r\n                {user.role === 'student' &&\r\n                    <label htmlFor=\"name\">Author: {quizObj.author?.name}</label>}\r\n                {(user.role === 'faculty' || user.role === 'admin') &&\r\n                    <Link to={`/quizSubmissions/${quizObj._id}`} className='alert-link' style={{ color: '#775ecf' }} >Submissions</Link>}\r\n                <label htmlFor=\"name\" style={{ float: 'right' }}>Last updated on {new Date(quizObj.createdAt).toLocaleString('en-us', { day: '2-digit', month: 'short', year: '2-digit', hour: '2-digit', minute: '2-digit' })}</label>\r\n            </Card.Footer>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    quiz: state.quiz,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    updateQuiz,\r\n    deleteQuiz,\r\n    startQuiz,\r\n    setUserNull,\r\n    setTestDetails,\r\n    setAlert,\r\n    clrQuizDeleteSuccess\r\n})(QuizCard);","E:\\project\\PlacePrep\\client\\src\\components\\coding\\CodeEditor.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\CreateQuizQuestion.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizOption.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\actions\\codeActions.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\sidebar\\MenuList.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodeSubTabRow.js",["338","339"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { deleteCodeSubmission } from '../../../store/actions/codeActions';\r\n\r\nconst CodeSubTabRow = (props) => {\r\n    const { auth: { user },\r\n        eleObj, idx, name, deleteCodeSubmission } = props;\r\n\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\" >{idx + 1}</th>\r\n            {(user.role === 'faculty' || user.role === 'admin') ?\r\n                <td ><Link className=\"questTitle\" to={`/codeSubmission/${eleObj._id}`}>{name}</Link></td>\r\n                :\r\n                <td ><Link className=\"questTitle\" to={`/codeSubmission/${eleObj._id}`}>{eleObj.question.title}</Link></td>\r\n            }\r\n            <td ><span>{new Date(eleObj.createdAt).toLocaleString('en-us', { day: '2-digit', month: 'short', year: '2-digit', hour: '2-digit', minute: '2-digit' })}</span></td>\r\n            <td>{eleObj.language}</td>\r\n            <td >\r\n                {eleObj.status === \"Accepted\" && (\r\n                    <span className=\"subStatus badge badgeSuccess \">\r\n                        {eleObj.status}\r\n                    </span>\r\n                )}\r\n                {eleObj.status === \"Not Accepted\" && (\r\n                    <span className=\"subStatus badge badgeWarning \">\r\n                        {eleObj.status}\r\n                    </span>\r\n                )}\r\n                {eleObj.status === \"Compile-time Error\" || \"Runtime Error\" && (\r\n                    <span className=\"subStatus badge badgeDanger \">\r\n                        {eleObj.status}\r\n                    </span>\r\n                )}\r\n            </td>\r\n            {user.role === 'student' && <td >\r\n                <span className='pl-4' style={{ cursor: 'pointer' }} onClick={() => deleteCodeSubmission(eleObj._id)} >\r\n                    <i className=\"fa fa-trash operation-D mr-3 mt-1 op\" aria-hidden=\"true\" ></i>\r\n                </span></td>}\r\n        </tr>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return ({\r\n        auth: state.auth,\r\n        code: state.code\r\n    });\r\n};\r\n\r\nexport default connect(mapStateToProps, { deleteCodeSubmission })(CodeSubTabRow);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\DashboardPie.js",["340","341"],"import React from \"react\";\r\nimport { PieChart, Pie, Tooltip, ResponsiveContainer } from \"recharts\";\r\n\r\nconst DashboardPie = (props) => {\r\n\tconst { easy, medium, hard } = props.submissions;\r\n\t///piechart data\r\n\tconst data01 = [\r\n\t\t{ name: \"Easy\", value: easy, fill: \"#5cb85c\" },\r\n\t\t{ name: \"Medium\", value: 200, fill: \"#f0ad4e\" },\r\n\t\t{ name: \"Hard\", value: 300, fill: \"#d9534f\" },\r\n\t];\r\n\r\n\tconst RADIAN = Math.PI / 180;\r\n\tconst renderCustomizedLabel = ({\r\n\t\tcx,\r\n\t\tcy,\r\n\t\tmidAngle,\r\n\t\tinnerRadius,\r\n\t\touterRadius,\r\n\t\tpercent,\r\n\t\tindex,\r\n\t}) => {\r\n\t\tconst radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n\t\tconst x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n\t\tconst y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n\t\treturn (\r\n\t\t\t<text\r\n\t\t\t\tx={x}\r\n\t\t\t\ty={y}\r\n\t\t\t\tfill=\"white\"\r\n\t\t\t\ttextAnchor={x > cx ? \"start\" : \"end\"}\r\n\t\t\t\tdominantBaseline=\"central\"\r\n\t\t\t>\r\n\t\t\t\t{percent !== 0 ? `${(percent * 100).toFixed(0)}%` : \"\"}\r\n\t\t\t</text>\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"card mb-3 cardPie\">\r\n\t\t\t<div className=\"card-header text-center pieHeader\">\r\n\t\t\t\t<h6 className=\"text-white mb-0\">Your Coding Analytics</h6>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"card-body\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-md-4\">\r\n\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height={210}>\r\n\t\t\t\t\t\t\t<PieChart width={350} height={200}>\r\n\t\t\t\t\t\t\t\t<Pie\r\n\t\t\t\t\t\t\t\t\tdataKey=\"value\"\r\n\t\t\t\t\t\t\t\t\tisAnimationActive={false}\r\n\t\t\t\t\t\t\t\t\tdata={data01}\r\n\t\t\t\t\t\t\t\t\tcx=\"50%\"\r\n\t\t\t\t\t\t\t\t\tcy=\"55%\"\r\n\t\t\t\t\t\t\t\t\touterRadius={80}\r\n\t\t\t\t\t\t\t\t\tlabel={renderCustomizedLabel}\r\n\t\t\t\t\t\t\t\t\tlabelLine={false}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<Tooltip />\r\n\t\t\t\t\t\t\t</PieChart>\r\n\t\t\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-md-8 inlineParent text-center \">\r\n\t\t\t\t\t\t{data01.map((data, index) => (\r\n\t\t\t\t\t\t\t<div key={index} className=\"inline\">\r\n\t\t\t\t\t\t\t\t<h3>\r\n\t\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"badge indicator text-white\"\r\n\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: `${data.fill}`,\r\n\t\t\t\t\t\t\t\t\t\t\twidth: \"150px\",\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{data.name} ({data.value})\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default DashboardPie;\r\n","E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\DashboardCard.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodeEditorSub.js",["342"],"import React, { Fragment, useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/eclipse.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/theme/blackboard.css\";\r\nimport \"codemirror/theme/base16-light.css\";\r\nimport \"codemirror/theme/ayu-mirage.css\";\r\nimport \"codemirror/addon/edit/matchbrackets\";\r\nimport \"codemirror/addon/edit/closebrackets\";\r\nimport \"codemirror/addon/scroll/simplescrollbars.css\";\r\nimport \"codemirror/addon/scroll/simplescrollbars\";\r\nimport \"codemirror/mode/clike/clike\";\r\nimport \"codemirror/mode/python/python\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    runCode,\r\n    submitCode,\r\n    resetCode,\r\n} from \"../../../store/actions/codeActions\";\r\nimport RunCodeSuccess from '../RunCodeSuccess';\r\nimport RunCodeFail from '../RunCodeFail';\r\nimport SubmitCodeSuccess from '../SubmitCodeSuccess';\r\n\r\n// require(\"codemirror/addon/scroll/simplescrollbars.js\");\r\n\r\nconst CodeEditor = (props) => {\r\n    let { auth: { user }, code: { userCode, runSubmit },\r\n        runCode,\r\n        submitCode,\r\n        resetCode,\r\n        userSolution, language } = props;\r\n\r\n    if (language === 'C') {\r\n        language = 'text/x-csrc';\r\n    }\r\n    else if (language === 'C++') {\r\n        language = 'text/x-c++src';\r\n    }\r\n    else if (language === 'Java') {\r\n        language = 'text/x-java';\r\n    }\r\n    else if (language === 'Python') {\r\n        language = 'text/x-python';\r\n    }\r\n\r\n    const [editorSelect, setEditorSelect] = useState({\r\n        lang: language,\r\n        theme: \"material\",\r\n        mime: \"text/x-csrc\",\r\n    });\r\n\r\n\r\n    const [showConsole, setShowConsole] = useState(false);\r\n    const [code, setCode] = useState(userSolution);\r\n\r\n\r\n    const handleOnChange = (e) => {\r\n        let selectedMime = e.target.selectedOptions[0].getAttribute(\r\n            \"data-mime\"\r\n        );\r\n        setEditorSelect({\r\n            ...editorSelect,\r\n            [e.target.name]: e.target.value,\r\n            mime: selectedMime,\r\n        });\r\n    };\r\n    let options = {\r\n        lineNumbers: true,\r\n        mode: editorSelect.lang,\r\n        theme: editorSelect.theme,\r\n        mime: editorSelect.mime,\r\n        styleActiveLine: true,\r\n        lineWrapping: true,\r\n        matchBrackets: true,\r\n        autoCloseBrackets: true,\r\n        scrollbarStyle: \"overlay\",\r\n    };\r\n\r\n    // const handleOnBeforeChangeCode = (editor, data, value) => {\r\n    //     setCode(value)\r\n\r\n    // }\r\n    const handleOnRun = () => {\r\n        setShowConsole(true);\r\n        runCode({ code, lang: editorSelect.lang, slug: props.slugProp, noOfInputs: props.inputs });\r\n    };\r\n\r\n\r\n    const handleOnSubmit = () => {\r\n        setShowConsole(true);\r\n        submitCode({ code, lang: editorSelect.lang, slug: props.slugProp, noOfInputs: props.inputs }, props.quesId);\r\n    };\r\n\r\n    const handleOnChangeCode = (editor, data, newCode) => {\r\n        setCode(newCode);\r\n    };\r\n\r\n    const handleOnClick = (e) => {\r\n        if (e.target.value === \"resetCode\") {\r\n            setCode(\"\");\r\n        }\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <div className=\"head\">\r\n                <Form inline className=\"editor-option-form\">\r\n                    <Form.Control\r\n                        as=\"select\"\r\n                        name=\"lang\"\r\n                        value={editorSelect.lang}\r\n                        className=\"mr-sm-2 editor-select\"\r\n                        onChange={handleOnChange}\r\n                    >\r\n                        <option value=\"text/x-csrc\" data-mime=\"text/x-csrc\">\r\n                            C\r\n                        </option>\r\n                        <option value=\"text/x-c++src\" data-mime=\"text/x-c++src\">\r\n                            C++\r\n                        </option>\r\n                        <option value=\"text/x-java\" data-mime=\"text/x-java\">\r\n                            Java\r\n                        </option>\r\n                        <option value=\"text/x-python\" data-mime=\"text/x-python\">\r\n                            Python\r\n                        </option>\r\n                    </Form.Control>\r\n                    <Form.Control\r\n                        as=\"select\"\r\n                        name=\"theme\"\r\n                        className=\"mr-sm-2 editor-select\"\r\n                        onChange={handleOnChange}\r\n                    >\r\n                        <option value=\"material\">Material</option>\r\n                        <option value=\"ayu-mirage\">Ayu Mirage</option>\r\n                        <option value=\"base16-light\">light</option>\r\n                        <option value=\"blackboard\">Blackboard</option>\r\n                        <option value=\"eclipse\">Eclipse</option>\r\n                    </Form.Control>\r\n                </Form>\r\n            </div>\r\n            <CodeMirror\r\n                value={code}\r\n                options={options}\r\n                autoFocus={true}\r\n                onBeforeChange={handleOnChangeCode}\r\n                onChange={handleOnChangeCode}\r\n            />\r\n            <div className=\"editor-controls\">\r\n                <div>\r\n                    <Button\r\n                        className=\"button reset-code-btn\"\r\n                        value=\"resetCode\"\r\n                        onClick={handleOnClick}\r\n                    >\r\n                        <i className=\"fa fa-undo\" aria-hidden=\"true\"></i>\r\n                        Reset Code\r\n                    </Button>\r\n                </div>\r\n                <div className=\"editor-actions\">\r\n                    <Button className=\"button run-code-btn\" onClick={handleOnRun}>\r\n                        <i className=\"fa fa-play\" aria-hidden=\"true\"></i>\r\n                        <span>Run Code</span>\r\n                    </Button>\r\n                    {user?.role === 'student' && <Button className=\"button submit-code-btn\" onClick={handleOnSubmit}>Submit</Button>}\r\n                </div>\r\n            </div>\r\n            <div className=\"console-container\" style={{ display: `${showConsole ? 'block' : 'none'}` }}>\r\n                {userCode ? (\r\n                    <div style={{ padding: '20px', backgroundColor: 'aliceblue' }} >\r\n                        {userCode.error ? (\r\n                            <RunCodeFail userCodeObj={userCode} />\r\n                        )\r\n                            : (\r\n                                runSubmit === 'run' ? <RunCodeSuccess userCodeObj={userCode} />\r\n                                    : <SubmitCodeSuccess userCodeObj={userCode} />\r\n\r\n                            )\r\n                        }\r\n                    </div>\r\n\r\n                )\r\n                    : <h4>Processing...</h4>}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    code: state.code,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, { runCode, submitCode, resetCode })(\r\n    CodeEditor\r\n);\r\n","E:\\project\\PlacePrep\\client\\src\\store\\actions\\practiceProblemActions.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeQuizQues.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizSubTabRow.js",["343"],"import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { setAlert } from '../../../store/actions/alertActions';\r\nimport { deleteQuizSubmission, clrQuizDeleteSuccess } from '../../../store/actions/quizActions';\r\n\r\nconst QuizSubTabRow = (props) => {\r\n    const { auth: { user },\r\n        quiz: { isDeleted },\r\n        eleObj,\r\n        idx,\r\n        name,\r\n        deleteQuizSubmission,\r\n        clrQuizDeleteSuccess,\r\n        setAlert } = props;\r\n\r\n    useEffect(() => {\r\n        if (isDeleted) {\r\n            console.log('delel', isDeleted);\r\n            setAlert('Quiz Submission Deleted', 'success');\r\n            clrQuizDeleteSuccess();\r\n        }\r\n    }, [isDeleted]);\r\n\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\" >{idx + 1}</th>\r\n            {(user.role === 'faculty' || user.role === 'admin') ?\r\n                <td ><Link className=\"questTitle\" to={`/quizSubmission/${eleObj._id}`}>{name}</Link></td>\r\n                :\r\n                <td ><Link className=\"questTitle\" to={`/quizSubmission/${eleObj._id}`}>{eleObj.quiz.title}</Link></td>\r\n            }\r\n            <td ><span>{new Date(eleObj.createdAt).toLocaleString('en-us', { day: '2-digit', month: 'short', year: '2-digit', hour: '2-digit', minute: '2-digit' })}</span></td>\r\n            <td ><span className=\"diffMod badge badge-success\">{eleObj.timeTaken.minutes < 10 ? `0${eleObj.timeTaken.minutes}` : eleObj.timeTaken.minutes}:{eleObj.timeTaken.seconds < 10 ? `0${eleObj.timeTaken.seconds}` : eleObj.timeTaken.seconds}</span></td>\r\n            <td>{eleObj.score}</td>\r\n            {(user.role === 'faculty' || user.role === 'admin') && <td >\r\n                <span className='pl-4' style={{ cursor: 'pointer' }} onClick={() => deleteQuizSubmission(eleObj._id)} >\r\n                    <i className=\"fa fa-trash operation-D mr-3 mt-1 op\" aria-hidden=\"true\" ></i>\r\n                </span></td>}\r\n        </tr>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return ({\r\n        auth: state.auth,\r\n        quiz: state.quiz\r\n    });\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    deleteQuizSubmission,\r\n    clrQuizDeleteSuccess,\r\n    setAlert\r\n})(QuizSubTabRow);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizQuesSub.js",["344"],"import React, { useState } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport QuizOptionSub from './QuizOptionSub';\r\nimport '../quiz.css';\r\nimport { connect } from 'react-redux';\r\nimport { submitQuiz } from '../../../store/actions/quizActions';\r\n\r\nconst QuizQues = (props) => {\r\n    const { userAns } = props;\r\n\r\n    // const [userAnswers] = useState(userAns);\r\n    const [userAnswers, setUserAnswers] = useState(userAns);\r\n\r\n    return (\r\n        <>\r\n            { props.questions.map((ele, index) => (\r\n                userAnswers ? (\r\n                    <Accordion key={index} className='my-2'>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Card.Title>\r\n                                    {`${index + 1}.`} {ele.question}\r\n                                </Card.Title>\r\n                                {ele.answers.map((ansEle, ansIdx) => <QuizOptionSub\r\n                                    key={ansIdx}\r\n                                    isCorrect={ansEle === ele.correctAnswer}\r\n                                    isClicked={ansEle === userAnswers[index].selectedAnswer}\r\n                                    text={ansEle} />)}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Accordion>) :\r\n                    <h3 key={index}>Loading...</h3>)\r\n            )}\r\n            {/* <div className=\"text-center\" onClick={handleOnClick} style={{ width: '200px', margin: 'auto' }}>\r\n                <Button className=\"createquiz mb-4\"  >Submit Quiz</Button>\r\n            </div> */}\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    quiz: state.quiz\r\n});\r\n\r\nexport default connect(mapStateToProps, { submitQuiz })(QuizQues);","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\CreateAptiQuestion.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\AptiTopicsTemplate.js",["345","346","347"],"import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Link } from 'react-router-dom';\r\nimport \"./practiceProblem.css\";\r\nimport slugify from 'slugify';\r\nimport MyModal from '../layout/MyModal';\r\nimport { Container, Button, Form, Accordion, Alert } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    clrPracProbDeleteSuccess,\r\n    filterPracProbTopics,\r\n    clearFilterPracProbTopics,\r\n    clearPracticeProblemErrors\r\n} from '../../store/actions/practiceProblemActions';\r\nimport { setAlert } from '../../store/actions/alertActions';\r\n\r\nconst AptiTopicsTemplate = (props) => {\r\n    // deletePracProbByTopic(title, ele)\r\n\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const {\r\n        auth: { user },\r\n        practiceProblem: { isDeleted, filtered },\r\n        topics,\r\n        idx,\r\n        title,\r\n        setAlert,\r\n        clrPracProbDeleteSuccess,\r\n        filterPracProbTopics,\r\n        clearFilterPracProbTopics\r\n    } = props;\r\n\r\n    const [query, setQuery] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (isDeleted) {\r\n            setAlert('Topic Deleted', 'success');\r\n            clrPracProbDeleteSuccess();\r\n        }\r\n    }, [isDeleted]);\r\n\r\n    useEffect(() => {\r\n        if (filtered === null) {\r\n            setQuery('');\r\n            clearFilterPracProbTopics(title);\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [filtered]);\r\n\r\n\r\n    const [titleTopic, setTitleTopic] = useState({\r\n        title: '',\r\n        topic: ''\r\n    });\r\n\r\n    const handleOnChange = (e) => {\r\n        setQuery(e.target.value);\r\n\r\n        if (e.target.value !== \"\") {\r\n            filterPracProbTopics(e.target.value, title);\r\n        }\r\n        else {\r\n            clearFilterPracProbTopics(title);\r\n        }\r\n    };\r\n\r\n    const handleOnClick = (title, topic) => {\r\n        setTitleTopic({\r\n            title,\r\n            topic\r\n        });\r\n        setModalShow(true);\r\n    };\r\n\r\n    const filteredTopics = (filtered && filtered[idx]) ? filtered[idx] : topics;\r\n\r\n    return (\r\n        <Container className=\"container-problems\">\r\n            {/* modal starts here */}\r\n            <MyModal\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n                titleAndTopic={titleTopic}\r\n            />\r\n            {/* Modal ends here */}\r\n            <Accordion>\r\n                <Accordion.Toggle\r\n                    as={Alert.Link}\r\n                    eventKey=\"0\"\r\n                    style={{ color: \"#775ecf\" }}\r\n                >\r\n                    <h3 className=\"text-center mb-3 pt-4 text-capitalize\">{title}</h3>\r\n                </Accordion.Toggle>\r\n\r\n                <div className=\"title-border mb-4\">\r\n                    <span></span>\r\n                </div>\r\n                <Accordion.Collapse\r\n                    eventKey=\"0\">\r\n                    <>\r\n                        <div className=\"row mr-2 ml-2\">\r\n                            <div className=\"col-12 \">\r\n                                <Form>\r\n                                    <Form.Group controlId={title} >\r\n                                        <Form.Control\r\n                                            className=\"searchField\"\r\n                                            onChange={handleOnChange}\r\n                                            value={query}\r\n                                            type=\"text\"\r\n                                            placeholder=\"Search Topics\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Form>\r\n                            </div>\r\n                        </div>\r\n                        <hr className=\"hr-1 pb-2\"></hr>\r\n\r\n                        <div className=\"Topics pb-4\">\r\n\r\n                            {/* Topics component starts here */}\r\n                            {filteredTopics.map((ele, index) =>\r\n                                <div key={index} className=\"row topic mb-3 pb-2 pt-2\">\r\n                                    <div className=\"col-sm-6 topic-left\">\r\n                                        <h5 className=\"topic-name\">{ele}</h5>\r\n                                    </div>\r\n                                    <div className=\"col-sm-6 \">\r\n                                        <div className=\"topic-right\">\r\n                                            {(user.role === 'faculty' || user.role === 'admin') &&\r\n                                                <span onClick={() => handleOnClick(title, ele)} style={{ cursor: 'pointer' }} >\r\n                                                    <i className=\"fa fa-trash operation-D mr-3 mt-1 op\" aria-hidden=\"true\" ></i>\r\n                                                </span>}\r\n                                            <Link to={`/practiceproblems/${slugify(title, { lower: true })}/${slugify(ele, { lower: true })}`} >\r\n                                                <span>\r\n                                                    <i className=\"fa fa-chevron-circle-right operation-D mr-3 mt-1 op\" aria-hidden=\"true\" ></i>\r\n                                                </span>\r\n                                            </Link>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                            {/* Topics component ends here */}\r\n\r\n                            {/* {(user.role === 'faculty' || user.role === 'admin') && <div className=\"text-center\">\r\n                                <Link to=\"/addtopic\"><Button className=\"Addmore-btn mt-2\" >Add More Topics</Button></Link>\r\n                            </div>} */}\r\n                        </div>\r\n                    </>\r\n                </Accordion.Collapse>\r\n            </Accordion>\r\n        </Container >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    practiceProblem: state.practiceProblem,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    setAlert,\r\n    clrPracProbDeleteSuccess,\r\n    filterPracProbTopics,\r\n    clearFilterPracProbTopics\r\n})(AptiTopicsTemplate);","E:\\project\\PlacePrep\\client\\src\\components\\coding\\RunCodeFail.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\SubmitCodeSuccess.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\RunCodeSuccess.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\layout\\MyModal.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeQuizOption.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\sidebar\\MenuItemData.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\ViewAnswer.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizOptionSub.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\code\\CodeTable.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\defaultCode.js",[],{"ruleId":"348","replacedBy":"349"},{"ruleId":"350","replacedBy":"351"},{"ruleId":"352","severity":1,"message":"353","line":11,"column":8,"nodeType":"354","messageId":"355","endLine":11,"endColumn":16},{"ruleId":"352","severity":1,"message":"356","line":15,"column":9,"nodeType":"354","messageId":"355","endLine":15,"endColumn":16},{"ruleId":"357","severity":1,"message":"358","line":24,"column":8,"nodeType":"359","endLine":24,"endColumn":19,"suggestions":"360"},{"ruleId":"352","severity":1,"message":"361","line":9,"column":27,"nodeType":"354","messageId":"355","endLine":9,"endColumn":43},{"ruleId":"362","severity":1,"message":"363","line":24,"column":17,"nodeType":"364","endLine":24,"endColumn":48},{"ruleId":"357","severity":1,"message":"365","line":20,"column":8,"nodeType":"359","endLine":20,"endColumn":10,"suggestions":"366"},{"ruleId":"357","severity":1,"message":"367","line":46,"column":8,"nodeType":"359","endLine":46,"endColumn":14,"suggestions":"368"},{"ruleId":"352","severity":1,"message":"369","line":110,"column":11,"nodeType":"354","messageId":"355","endLine":110,"endColumn":20},{"ruleId":"357","severity":1,"message":"370","line":20,"column":8,"nodeType":"359","endLine":20,"endColumn":10,"suggestions":"371"},{"ruleId":"357","severity":1,"message":"372","line":69,"column":8,"nodeType":"359","endLine":69,"endColumn":19,"suggestions":"373"},{"ruleId":"357","severity":1,"message":"374","line":35,"column":8,"nodeType":"359","endLine":35,"endColumn":19,"suggestions":"375"},{"ruleId":"362","severity":1,"message":"363","line":204,"column":41,"nodeType":"364","endLine":208,"endColumn":42},{"ruleId":"362","severity":1,"message":"363","line":242,"column":41,"nodeType":"364","endLine":246,"endColumn":42},{"ruleId":"362","severity":1,"message":"363","line":19,"column":29,"nodeType":"364","endLine":24,"endColumn":30},{"ruleId":"357","severity":1,"message":"376","line":34,"column":8,"nodeType":"359","endLine":34,"endColumn":19,"suggestions":"377"},{"ruleId":"378","severity":1,"message":"379","line":31,"column":57,"nodeType":"380","messageId":"381","endLine":31,"endColumn":59},{"ruleId":"378","severity":1,"message":"379","line":31,"column":76,"nodeType":"380","messageId":"381","endLine":31,"endColumn":78},{"ruleId":"352","severity":1,"message":"382","line":5,"column":16,"nodeType":"354","messageId":"355","endLine":5,"endColumn":22},{"ruleId":"352","severity":1,"message":"383","line":5,"column":24,"nodeType":"354","messageId":"355","endLine":5,"endColumn":28},{"ruleId":"352","severity":1,"message":"384","line":32,"column":9,"nodeType":"354","messageId":"355","endLine":32,"endColumn":18},{"ruleId":"357","severity":1,"message":"376","line":23,"column":8,"nodeType":"359","endLine":23,"endColumn":19,"suggestions":"385"},{"ruleId":"352","severity":1,"message":"386","line":13,"column":25,"nodeType":"354","messageId":"355","endLine":13,"endColumn":39},{"ruleId":"352","severity":1,"message":"387","line":7,"column":21,"nodeType":"354","messageId":"355","endLine":7,"endColumn":27},{"ruleId":"352","severity":1,"message":"388","line":13,"column":5,"nodeType":"354","messageId":"355","endLine":13,"endColumn":31},{"ruleId":"357","severity":1,"message":"374","line":40,"column":8,"nodeType":"359","endLine":40,"endColumn":19,"suggestions":"389"},"no-native-reassign",["390"],"no-negated-in-lhs",["391"],"no-unused-vars","'QuizPage' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clearTestDetails', 'clrQuizCreateSuccess', and 'setAlert'. Either include them or remove the dependency array.","ArrayExpression",["392"],"'setCountdownDate' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'getQuestion' and 'slug'. Either include them or remove the dependency array.",["393"],"React Hook useEffect has missing dependencies: 'codeId' and 'getCodeSubmissions'. Either include them or remove the dependency array.",["394"],"'subNumber' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCodeSubmission' and 'id'. Either include them or remove the dependency array.",["395"],"React Hook useEffect has missing dependencies: 'clrCodeCreateSuccess', 'props.match.path', and 'setAlert'. Either include them or remove the dependency array.",["396"],"React Hook useEffect has missing dependencies: 'clrPracProbDeleteSuccess' and 'setAlert'. Either include them or remove the dependency array.",["397"],"React Hook useEffect has missing dependencies: 'clrQuizDeleteSuccess' and 'setAlert'. Either include them or remove the dependency array.",["398"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'medium' is assigned a value but never used.","'hard' is assigned a value but never used.","'resetCode' is assigned a value but never used.",["399"],"'setUserAnswers' is assigned a value but never used.","'Button' is defined but never used.","'clearPracticeProblemErrors' is defined but never used.",["400"],"no-global-assign","no-unsafe-negation",{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"413","fix":"415"},{"desc":"411","fix":"416"},"Update the dependencies array to be: [clearTestDetails, clrQuizCreateSuccess, isCreated, setAlert]",{"range":"417","text":"418"},"Update the dependencies array to be: [getQuestion, slug]",{"range":"419","text":"420"},"Update the dependencies array to be: [codeId, getCodeSubmissions, user]",{"range":"421","text":"422"},"Update the dependencies array to be: [getCodeSubmission, id]",{"range":"423","text":"424"},"Update the dependencies array to be: [clrCodeCreateSuccess, isCreated, props.match.path, setAlert]",{"range":"425","text":"426"},"Update the dependencies array to be: [clrPracProbDeleteSuccess, isDeleted, setAlert]",{"range":"427","text":"428"},"Update the dependencies array to be: [clrQuizDeleteSuccess, isDeleted, setAlert]",{"range":"429","text":"430"},{"range":"431","text":"430"},{"range":"432","text":"428"},[975,986],"[clearTestDetails, clrQuizCreateSuccess, isCreated, setAlert]",[675,677],"[getQuestion, slug]",[1419,1425],"[codeId, getCodeSubmissions, user]",[717,719],"[getCodeSubmission, id]",[2080,2091],"[clrCodeCreateSuccess, isCreated, props.match.path, setAlert]",[1162,1173],"[clrPracProbDeleteSuccess, isDeleted, setAlert]",[948,959],"[clrQuizDeleteSuccess, isDeleted, setAlert]",[735,746],[1239,1250]]