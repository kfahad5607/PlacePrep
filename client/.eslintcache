[{"E:\\project\\PlacePrep\\client\\src\\index.js":"1","E:\\project\\PlacePrep\\client\\src\\store\\configureStore.js":"2","E:\\project\\PlacePrep\\client\\src\\App.js":"3","E:\\project\\PlacePrep\\client\\src\\store\\reducers\\reducer.js":"4","E:\\project\\PlacePrep\\client\\src\\store\\actions\\authActions.js":"5","E:\\project\\PlacePrep\\client\\src\\components\\auth\\Login.js":"6","E:\\project\\PlacePrep\\client\\src\\components\\layout\\Alerts.js":"7","E:\\project\\PlacePrep\\client\\src\\components\\routing\\PrivateRoute.js":"8","E:\\project\\PlacePrep\\client\\src\\components\\auth\\Resetpassword.js":"9","E:\\project\\PlacePrep\\client\\src\\components\\layout\\Home.js":"10","E:\\project\\PlacePrep\\client\\src\\components\\auth\\Register.js":"11","E:\\project\\PlacePrep\\client\\src\\store\\reducers\\codeReducers.js":"12","E:\\project\\PlacePrep\\client\\src\\store\\reducers\\quizReducers.js":"13","E:\\project\\PlacePrep\\client\\src\\store\\reducers\\alertReducers.js":"14","E:\\project\\PlacePrep\\client\\src\\store\\reducers\\authReducers.js":"15","E:\\project\\PlacePrep\\client\\src\\store\\reducers\\practiceProblemReducers.js":"16","E:\\project\\PlacePrep\\client\\src\\components\\auth\\UserProfile.js":"17","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\CreateQuiz.js":"18","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\EditQuiz.js":"19","E:\\project\\PlacePrep\\client\\src\\components\\code\\CreateCodeQues.js":"20","E:\\project\\PlacePrep\\client\\src\\components\\auth\\MessagePanel.js":"21","E:\\project\\PlacePrep\\client\\src\\store\\actions\\alertActions.js":"22","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizPage.js":"23","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizCardPage.js":"24","E:\\project\\PlacePrep\\client\\src\\components\\sidebar\\SideBar.js":"25","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeProblem.js":"26","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeQuizPage.js":"27","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\AddTopics.js":"28","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\EditPracticeProblem.js":"29","E:\\project\\PlacePrep\\client\\src\\components\\layout\\Navbar.js":"30","E:\\project\\PlacePrep\\client\\src\\components\\coding\\Coding.js":"31","E:\\project\\PlacePrep\\client\\src\\components\\code\\CodeQuestions.js":"32","E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodingSub.js":"33","E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodeSubmissions.js":"34","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizPageSub.js":"35","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizSubmissions.js":"36","E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\Dashboard.js":"37","E:\\project\\PlacePrep\\client\\src\\store\\actions\\actionTypes.js":"38","E:\\project\\PlacePrep\\client\\src\\store\\actions\\quizActions.js":"39","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\AptiTopicsTemplate.js":"40","E:\\project\\PlacePrep\\client\\src\\store\\actions\\practiceProblemActions.js":"41","E:\\project\\PlacePrep\\client\\src\\components\\sidebar\\MenuList.js":"42","E:\\project\\PlacePrep\\client\\src\\store\\actions\\codeActions.js":"43","E:\\project\\PlacePrep\\client\\src\\components\\layout\\Spinner.js":"44","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizTimer.js":"45","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizQues.js":"46","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeQuizQues.js":"47","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizCard.js":"48","E:\\project\\PlacePrep\\client\\src\\components\\coding\\CodeDescription.js":"49","E:\\project\\PlacePrep\\client\\src\\components\\coding\\CodingSolution.js":"50","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\CreateAptiQuestion.js":"51","E:\\project\\PlacePrep\\client\\src\\components\\code\\Pagination.js":"52","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizSubTabRow.js":"53","E:\\project\\PlacePrep\\client\\src\\components\\code\\paginate.js":"54","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizQuesSub.js":"55","E:\\project\\PlacePrep\\client\\src\\components\\coding\\CodeEditor.js":"56","E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodeSubTabRow.js":"57","E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodeEditorSub.js":"58","E:\\project\\PlacePrep\\client\\src\\components\\layout\\MyModal.js":"59","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizOption.js":"60","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\ViewAnswer.js":"61","E:\\project\\PlacePrep\\client\\src\\components\\sidebar\\MenuItemData.js":"62","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeQuizOption.js":"63","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizOptionSub.js":"64","E:\\project\\PlacePrep\\client\\src\\components\\coding\\SubmitCodeSuccess.js":"65","E:\\project\\PlacePrep\\client\\src\\components\\coding\\RunCodeFail.js":"66","E:\\project\\PlacePrep\\client\\src\\components\\coding\\RunCodeSuccess.js":"67","E:\\project\\PlacePrep\\client\\src\\components\\auth\\ResPassModal.js":"68","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\CreateQuizQuestion.js":"69","E:\\project\\PlacePrep\\client\\src\\components\\code\\CodeTableRow.js":"70","E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\DashboardCard.js":"71","E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\DashboardUserTable.js":"72"},{"size":339,"mtime":1614246808381,"results":"73","hashOfConfig":"74"},{"size":292,"mtime":1614246808393,"results":"75","hashOfConfig":"74"},{"size":1379,"mtime":1614668116344,"results":"76","hashOfConfig":"74"},{"size":474,"mtime":1614247961956,"results":"77","hashOfConfig":"74"},{"size":5833,"mtime":1614601223447,"results":"78","hashOfConfig":"74"},{"size":4169,"mtime":1614668180651,"results":"79","hashOfConfig":"74"},{"size":460,"mtime":1614251446785,"results":"80","hashOfConfig":"74"},{"size":521,"mtime":1613733327068,"results":"81","hashOfConfig":"74"},{"size":2522,"mtime":1614578762668,"results":"82","hashOfConfig":"74"},{"size":3696,"mtime":1614667815920,"results":"83","hashOfConfig":"74"},{"size":5145,"mtime":1614250909080,"results":"84","hashOfConfig":"74"},{"size":5428,"mtime":1614666154482,"results":"85","hashOfConfig":"74"},{"size":4300,"mtime":1614581113448,"results":"86","hashOfConfig":"74"},{"size":400,"mtime":1614248891434,"results":"87","hashOfConfig":"74"},{"size":3991,"mtime":1614665782844,"results":"88","hashOfConfig":"74"},{"size":2525,"mtime":1614421537741,"results":"89","hashOfConfig":"74"},{"size":8325,"mtime":1614668200626,"results":"90","hashOfConfig":"74"},{"size":10653,"mtime":1614580123622,"results":"91","hashOfConfig":"74"},{"size":9765,"mtime":1614580891340,"results":"92","hashOfConfig":"74"},{"size":15590,"mtime":1614593076476,"results":"93","hashOfConfig":"74"},{"size":787,"mtime":1613041950809,"results":"94","hashOfConfig":"74"},{"size":428,"mtime":1614420791123,"results":"95","hashOfConfig":"74"},{"size":2240,"mtime":1614246808372,"results":"96","hashOfConfig":"74"},{"size":1316,"mtime":1614246808371,"results":"97","hashOfConfig":"74"},{"size":6813,"mtime":1614246808376,"results":"98","hashOfConfig":"74"},{"size":1050,"mtime":1614246808349,"results":"99","hashOfConfig":"74"},{"size":1807,"mtime":1614246808361,"results":"100","hashOfConfig":"74"},{"size":9272,"mtime":1614421696859,"results":"101","hashOfConfig":"74"},{"size":6339,"mtime":1614421953870,"results":"102","hashOfConfig":"74"},{"size":2114,"mtime":1614669281879,"results":"103","hashOfConfig":"74"},{"size":1988,"mtime":1614578762818,"results":"104","hashOfConfig":"74"},{"size":9032,"mtime":1614668335693,"results":"105","hashOfConfig":"74"},{"size":2450,"mtime":1614578762996,"results":"106","hashOfConfig":"74"},{"size":8407,"mtime":1614578762930,"results":"107","hashOfConfig":"74"},{"size":2019,"mtime":1614578763058,"results":"108","hashOfConfig":"74"},{"size":11709,"mtime":1614578763058,"results":"109","hashOfConfig":"74"},{"size":3823,"mtime":1614597616288,"results":"110","hashOfConfig":"74"},{"size":4317,"mtime":1614598022397,"results":"111","hashOfConfig":"74"},{"size":8215,"mtime":1614581023361,"results":"112","hashOfConfig":"74"},{"size":4680,"mtime":1614246808317,"results":"113","hashOfConfig":"74"},{"size":4770,"mtime":1614421508699,"results":"114","hashOfConfig":"74"},{"size":7935,"mtime":1614246808376,"results":"115","hashOfConfig":"74"},{"size":6559,"mtime":1614581006511,"results":"116","hashOfConfig":"74"},{"size":358,"mtime":1613807454842,"results":"117","hashOfConfig":"74"},{"size":1724,"mtime":1614246808373,"results":"118","hashOfConfig":"74"},{"size":3058,"mtime":1614578763057,"results":"119","hashOfConfig":"74"},{"size":2240,"mtime":1614246808363,"results":"120","hashOfConfig":"74"},{"size":3771,"mtime":1614578763057,"results":"121","hashOfConfig":"74"},{"size":2180,"mtime":1613997627711,"results":"122","hashOfConfig":"74"},{"size":545,"mtime":1612959040740,"results":"123","hashOfConfig":"74"},{"size":5557,"mtime":1614578763056,"results":"124","hashOfConfig":"74"},{"size":1218,"mtime":1614669248007,"results":"125","hashOfConfig":"74"},{"size":1748,"mtime":1614246808375,"results":"126","hashOfConfig":"74"},{"size":211,"mtime":1613991469736,"results":"127","hashOfConfig":"74"},{"size":1793,"mtime":1614246808374,"results":"128","hashOfConfig":"74"},{"size":6664,"mtime":1614590975796,"results":"129","hashOfConfig":"74"},{"size":1560,"mtime":1614578762930,"results":"130","hashOfConfig":"74"},{"size":7013,"mtime":1614578762930,"results":"131","hashOfConfig":"74"},{"size":1910,"mtime":1614246808263,"results":"132","hashOfConfig":"74"},{"size":751,"mtime":1614246808372,"results":"133","hashOfConfig":"74"},{"size":817,"mtime":1614246808364,"results":"134","hashOfConfig":"74"},{"size":3006,"mtime":1614578763059,"results":"135","hashOfConfig":"74"},{"size":1197,"mtime":1614246808356,"results":"136","hashOfConfig":"74"},{"size":1106,"mtime":1614246808374,"results":"137","hashOfConfig":"74"},{"size":1098,"mtime":1614578762819,"results":"138","hashOfConfig":"74"},{"size":523,"mtime":1614578762819,"results":"139","hashOfConfig":"74"},{"size":1125,"mtime":1614578762819,"results":"140","hashOfConfig":"74"},{"size":1935,"mtime":1614578762667,"results":"141","hashOfConfig":"74"},{"size":7861,"mtime":1614255543154,"results":"142","hashOfConfig":"74"},{"size":2872,"mtime":1614669198869,"results":"143","hashOfConfig":"74"},{"size":1031,"mtime":1614669363092,"results":"144","hashOfConfig":"74"},{"size":6970,"mtime":1614668889639,"results":"145","hashOfConfig":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},"kwzxpx",{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"148"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"148"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"148"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"148"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"148"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"148"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"148"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"148"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"148"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"148"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"148"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"148"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"148"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"148"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"148"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"148"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"148"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"148"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"148"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"148"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"148"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"148"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"148"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"148"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"148"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\project\\PlacePrep\\client\\src\\index.js",[],["316","317"],"E:\\project\\PlacePrep\\client\\src\\store\\configureStore.js",[],"E:\\project\\PlacePrep\\client\\src\\App.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\reducers\\reducer.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\actions\\authActions.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\auth\\Login.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\layout\\Alerts.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\routing\\PrivateRoute.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\auth\\Resetpassword.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\layout\\Home.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\auth\\Register.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\reducers\\codeReducers.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\reducers\\quizReducers.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\reducers\\alertReducers.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\reducers\\authReducers.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\reducers\\practiceProblemReducers.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\auth\\UserProfile.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\CreateQuiz.js",["318"],"import React, { useState, useEffect } from \"react\";\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./quiz.css\";\r\nimport { Button, Container, Form } from \"react-bootstrap\";\r\nimport QuizQuestion from \"./CreateQuizQuestion\";\r\nimport { connect } from \"react-redux\";\r\nimport { addQuiz, clearQuizErrors } from \"../../store/actions/quizActions\";\r\nimport { setAlert } from \"../../store/actions/alertActions\";\r\n\r\nfunction CreateQuiz(props) {\r\n    const {\r\n        auth: { user },\r\n        quiz: { error },\r\n        addQuiz,\r\n        clearQuizErrors,\r\n        setAlert,\r\n    } = props;\r\n\r\n    const [quiz, setQuiz] = useState({\r\n        author: '',\r\n        title: '',\r\n        category: 'quantitative analysis',\r\n        topic: '',\r\n        duration: '',\r\n        questionWeightage: '',\r\n        questions: [{\r\n            id: 0,\r\n            question: '',\r\n            answers: ['', '', '', ''],\r\n            correctAnswer: ''\r\n        }]\r\n    });\r\n\r\n    const [lastId, setLastId] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            setAlert(error, \"danger\");\r\n            clearQuizErrors();\r\n        }\r\n    }, [error]);\r\n\r\n    const handleAddQuesClick = () => {\r\n        const newQuesObj = {\r\n            id: lastId + 1,\r\n            question: \"\",\r\n            answers: [\"\", \"\", \"\", \"\"],\r\n            correctAnswer: \"\",\r\n        };\r\n\r\n        setLastId(lastId + 1);\r\n\r\n        const newQuesArray = [...quiz.questions, newQuesObj];\r\n        setQuiz({\r\n            ...quiz,\r\n            questions: newQuesArray,\r\n        });\r\n    };\r\n\r\n    const handleOnChange = (e) => {\r\n        setQuiz({\r\n            ...quiz,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleOnChangeQues = (e, index) => {\r\n        const quesArray = [...quiz.questions];\r\n        if (e.target.name === \"question\" || e.target.name === \"correctAnswer\") {\r\n            quesArray[index][e.target.name] = e.target.value;\r\n            setQuiz({\r\n                ...quiz,\r\n                questions: quesArray,\r\n            });\r\n        } else {\r\n            let optIndex = 0;\r\n            if (e.target.name === \"optionB\") {\r\n                optIndex = 1;\r\n            } else if (e.target.name === \"optionC\") {\r\n                optIndex = 2;\r\n            } else if (e.target.name === \"optionD\") {\r\n                optIndex = 3;\r\n            }\r\n            quesArray[index].answers[optIndex] = e.target.value;\r\n            setQuiz({\r\n                ...quiz,\r\n                questions: quesArray,\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleOnDelete = (eleId) => {\r\n        const newQuesArray = quiz.questions.filter((ele) => {\r\n            return ele.id !== eleId;\r\n        });\r\n        setQuiz({\r\n            ...quiz,\r\n            questions: newQuesArray,\r\n        });\r\n    };\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (quiz.title === \"\" || quiz.topic === \"\" || quiz.duration === \"\") {\r\n            setAlert(\"Please enter all fields\", \"danger\");\r\n        } else {\r\n            let tempQuiz = JSON.parse(JSON.stringify(quiz));\r\n            tempQuiz.author = user._id;\r\n            console.log(\"quiz\", tempQuiz);\r\n            addQuiz(tempQuiz);\r\n\r\n            setQuiz({\r\n                title: '',\r\n                category: '',\r\n                topic: '',\r\n                duration: '',\r\n                questionWeightage: '',\r\n                questions: [{\r\n                    id: 0,\r\n                    question: '',\r\n                    answers: ['', '', '', ''],\r\n                    correctAnswer: ''\r\n                }]\r\n            });\r\n        };\r\n    }\r\n\r\n    return (\r\n        <Container className=\"container-quiz\">\r\n            <h3 className=\"text-center  mb-2 pt-4 \">QUIZ DETAILS</h3>\r\n            <div className=\"title-border mb-4\">\r\n                <span></span>\r\n            </div>\r\n            <div className=\"createquizform pb-1\">\r\n                <Form onSubmit={onSubmit}>\r\n                    <div className=\"row mb-2\">\r\n                        <div className=\"col-sm-6\">\r\n                            <Form.Group controlId=\"quiztitle\">\r\n                                <Form.Label>\r\n                                    <b>Quiz title</b>\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    className=\"quiz-inputFiled\"\r\n                                    name=\"title\"\r\n                                    value={quiz.title}\r\n                                    onChange={handleOnChange}\r\n                                    type=\"\"\r\n                                    placeholder=\"Enter Title\"\r\n                                />\r\n                            </Form.Group>\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                            <Form.Group controlId=\"category\">\r\n                                <Form.Label>\r\n                                    <b>Select Category</b>\r\n                                </Form.Label>\r\n                                <Form.Group controlId=\"SelectRowsPerpage\">\r\n                                    <Form.Control\r\n                                        as=\"select\"\r\n                                        className=\"quiz-inputFiled\"\r\n                                        name=\"category\"\r\n                                        value={quiz.category}\r\n                                        onChange={handleOnChange}\r\n                                    >\r\n                                        <option\r\n                                            className=\"optionSelect\"\r\n                                            value=\"quantitative analysis\"\r\n                                        >\r\n                                            Quantitative Analysis\r\n                                        </option>\r\n                                        <option\r\n                                            className=\"optionSelect\"\r\n                                            value=\"logical reasoning\"\r\n                                        >\r\n                                            Logical Reasoning\r\n                                        </option>\r\n                                        <option\r\n                                            className=\"optionSelect\"\r\n                                            value=\"verbal ability\"\r\n                                        >\r\n                                            Verbal Ability\r\n                                        </option>\r\n                                        <option\r\n                                            className=\"optionSelect\"\r\n                                            value=\"other topics\"\r\n                                        >\r\n                                            Others\r\n                                        </option>\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mb-2\">\r\n                        <div className=\"col-sm-6 responsivelabel\">\r\n                            <Form.Group controlId=\"topics\">\r\n                                <Form.Label>\r\n                                    <b>Quiz topics</b>\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    className=\"quiz-inputFiled \"\r\n                                    name=\"topic\"\r\n                                    value={quiz.topic}\r\n                                    onChange={handleOnChange}\r\n                                    type=\"\"\r\n                                    placeholder=\"Example: Probability, Trains...\"\r\n                                />\r\n                            </Form.Group>\r\n                        </div>\r\n                        <div className=\"col-sm-3 responsivelabel\">\r\n                            <Form.Group controlId=\"duration\" >\r\n                                <Form.Label><b >Duration</b></Form.Label>\r\n                                <Form.Control className=\"quiz-inputFiled quizDuration \" name=\"duration\" value={quiz.duration} onChange={handleOnChange} type=\"number\" placeholder=\"Minutes only\" />\r\n                            </Form.Group>\r\n                        </div>\r\n                        <div className=\"col-sm-3 responsivelabel\">\r\n                            <Form.Group controlId=\"weightage\" >\r\n                                <Form.Label><b >Weightage</b></Form.Label>\r\n                                <Form.Control className=\"quiz-inputFiled quizDuration \" name=\"questionWeightage\" value={quiz.questionWeightage} onChange={handleOnChange} type=\"number\" placeholder=\"Marks\" />\r\n\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                    <hr></hr>\r\n                    <h3 className=\"text-center  mb-2 pt-2 \">ADD QUESTIONS</h3>\r\n                    <div className=\"title-border mb-3\">\r\n                        <span></span>\r\n                    </div>\r\n\r\n                    {quiz.questions.map((ele, index) => (\r\n                        <QuizQuestion\r\n                            key={ele.id}\r\n                            index={index}\r\n                            onDeleteFunc={() => handleOnDelete(ele.id)}\r\n                            onChangeFunc={(e) => handleOnChangeQues(e, index)}\r\n                            quesObj={ele}\r\n                        />\r\n                    ))}\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                            <Button\r\n                                className=\"addquestbtn mb-2\"\r\n                                onClick={handleAddQuesClick}\r\n                            >\r\n                                {\" \"}\r\n                                Add Next Question{\" \"}\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"col-sm-6 text-center\">\r\n                            <Button className=\"createquiz mb-4\" type=\"submit\">\r\n                                Create Quiz\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        quiz: state.quiz,\r\n        auth: state.auth,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { addQuiz, clearQuizErrors, setAlert })(CreateQuiz)\r\n","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\EditQuiz.js",["319","320"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./quiz.css\";\r\nimport { Button, Container, Form } from \"react-bootstrap\";\r\nimport QuizQuestion from \"./CreateQuizQuestion\";\r\nimport Spinner from \"../layout/Spinner\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    getQuiz,\r\n    updateQuiz,\r\n    deleteQuizQuestion,\r\n    setCurrentQuiz,\r\n    clearQuizErrors\r\n} from \"../../store/actions/quizActions\";\r\nimport { setAlert } from \"../../store/actions/alertActions\";\r\n\r\nconst EditQuiz = (props) => {\r\n    const {\r\n        quiz: { current, error },\r\n        getQuiz,\r\n        updateQuiz,\r\n        deleteQuizQuestion,\r\n        setCurrentQuiz,\r\n        clearQuizErrors,\r\n        setAlert,\r\n        match,\r\n    } = props;\r\n\r\n    const slug = match.params.slug;\r\n    useEffect(() => {\r\n        getQuiz(slug);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            setAlert(error, \"danger\");\r\n            clearQuizErrors();\r\n        }\r\n        if (current !== null) {\r\n            // if User updates Quiz title then slug also updates\r\n            // Hence updating slug in the url\r\n            props.history.replace({ pathname: `/editQuiz/${current.slug}` });\r\n\r\n            let tempDeepCopy = JSON.parse(JSON.stringify(current));\r\n            setQuizLocal(tempDeepCopy);\r\n        } else {\r\n            setQuizLocal({\r\n                title: '',\r\n                category: '',\r\n                topic: '',\r\n                duration: '',\r\n                questionWeightage: '',\r\n                questions: [{\r\n                    id: 0,\r\n                    question: '',\r\n                    answers: ['', '', '', ''],\r\n                    correctAnswer: ''\r\n                }]\r\n            });\r\n        }\r\n    }, [current, error]);\r\n\r\n    // let tempDeepCopy = JSON.parse(JSON.stringify(current));\r\n    const [quizLocal, setQuizLocal] = useState({\r\n        title: '',\r\n        category: '',\r\n        topic: '',\r\n        duration: '',\r\n        questionWeightage: '',\r\n        questions: [{\r\n            id: 0,\r\n            question: '',\r\n            answers: ['', '', '', ''],\r\n            correctAnswer: ''\r\n        }]\r\n    });\r\n\r\n    const [lastId, setLastId] = useState(0);\r\n\r\n    const handleAddQuesClick = () => {\r\n        const newQuesObj = {\r\n            id: lastId + 1,\r\n            question: \"\",\r\n            answers: [\"\", \"\", \"\", \"\"],\r\n            correctAnswer: \"\",\r\n        };\r\n\r\n        setLastId(lastId + 1);\r\n\r\n        const newQuesArray = [...quizLocal.questions, newQuesObj];\r\n        setQuizLocal({\r\n            ...quizLocal,\r\n            questions: newQuesArray,\r\n        });\r\n    };\r\n\r\n    const handleOnChange = (e) => {\r\n        setQuizLocal({\r\n            ...quizLocal,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleOnChangeQues = (e, index) => {\r\n        const quesArray = [...quizLocal.questions];\r\n        if (e.target.name === \"question\" || e.target.name === \"correctAnswer\") {\r\n            quesArray[index][e.target.name] = e.target.value;\r\n            setQuizLocal({\r\n                ...quizLocal,\r\n                questions: quesArray,\r\n            });\r\n        } else {\r\n            let optIndex = 0;\r\n            if (e.target.name === \"optionB\") {\r\n                optIndex = 1;\r\n            } else if (e.target.name === \"optionC\") {\r\n                optIndex = 2;\r\n            } else if (e.target.name === \"optionD\") {\r\n                optIndex = 3;\r\n            }\r\n            quesArray[index].answers[optIndex] = e.target.value;\r\n            setQuizLocal({\r\n                ...quizLocal,\r\n                questions: quesArray,\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleOnDelete = (eleId) => {\r\n        const newQuesArray = quizLocal.questions.filter((ele) => {\r\n            let tempId = ele.id || ele._id;\r\n            return eleId !== tempId;\r\n        });\r\n\r\n        if (isNaN(eleId)) {\r\n            deleteQuizQuestion(eleId);\r\n        }\r\n\r\n        setQuizLocal({\r\n            ...quizLocal,\r\n            questions: newQuesArray,\r\n        });\r\n    };\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (\r\n            quizLocal.title === \"\" ||\r\n            quizLocal.topic === \"\" ||\r\n            quizLocal.duration === \"\"\r\n        ) {\r\n            setAlert(\"Please enter all fields\", \"danger\");\r\n        } else {\r\n            updateQuiz(quizLocal);\r\n            setCurrentQuiz(quizLocal);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {current ? (<Container className=\"container-quiz\">\r\n                <h3 className=\"text-center  mb-2 pt-4 \">QUIZ DETAILS</h3>\r\n                <div className=\"title-border mb-4\">\r\n                    <span></span>\r\n                </div>\r\n                <div className=\"createquizform pb-1\">\r\n                    <Form onSubmit={onSubmit} >\r\n                        <div className=\"row mb-2\">\r\n                            <div className=\"col-sm-6\">\r\n                                <Form.Group controlId=\"quiztitle\" >\r\n                                    <Form.Label><b>Quiz title</b></Form.Label>\r\n                                    <Form.Control className=\"quiz-inputFiled\" name=\"title\" value={quizLocal.title} onChange={handleOnChange} type=\"\" placeholder=\"Enter Title\" />\r\n                                </Form.Group>\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                                <Form.Group controlId=\"category\" >\r\n                                    <Form.Label><b>Select Category</b></Form.Label>\r\n                                    <Form.Group controlId=\"SelectRowsPerpage\">\r\n                                        <Form.Control as=\"select\" className=\"quiz-inputFiled\" name='category' value={quizLocal.category} onChange={handleOnChange} >\r\n                                            <option className=\"optionSelect\" value='quantitative analysis' >Quantitative Analysis</option>\r\n                                            <option className=\"optionSelect\" value='logical reasoning' >Logical Reasoning</option>\r\n                                            <option className=\"optionSelect\" value='verbal ability' >Verbal Ability</option>\r\n                                            <option className=\"optionSelect\" value='other topics' >Others</option>\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Form.Group>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mb-2\">\r\n                            <div className=\"col-sm-6 responsivelabel\">\r\n                                <Form.Group controlId=\"topics\" >\r\n                                    <Form.Label><b>Quiz topics</b></Form.Label>\r\n                                    <Form.Control className=\"quiz-inputFiled \" name=\"topic\" value={quizLocal.topic} onChange={handleOnChange} type=\"\" placeholder=\"Example: Probability, Trains...\" />\r\n                                </Form.Group>\r\n\r\n                            </div>\r\n                            <div className=\"col-sm-3 responsivelabel\">\r\n                                <Form.Group controlId=\"duration\" >\r\n                                    <Form.Label><b >Duration</b></Form.Label>\r\n                                    <Form.Control className=\"quiz-inputFiled quizDuration \" name=\"duration\" value={quizLocal.duration} onChange={handleOnChange} type=\"number\" placeholder=\"Minutes only\" />\r\n                                </Form.Group>\r\n                            </div>\r\n                            <div className=\"col-sm-3 responsivelabel\">\r\n                                <Form.Group controlId=\"weightage\" >\r\n                                    <Form.Label><b >Weightage</b></Form.Label>\r\n                                    <Form.Control className=\"quiz-inputFiled quizDuration \" name=\"questionWeightage\" value={quizLocal.questionWeightage} onChange={handleOnChange} type=\"number\" placeholder=\"Marks\" />\r\n                                </Form.Group>\r\n                            </div>\r\n                        </div>\r\n                        <hr></hr>\r\n                        <h3 className=\"text-center  mb-2 pt-2 \">ADD QUESTIONS</h3>\r\n                        <div className=\"title-border mb-3\">\r\n                            <span></span>\r\n                        </div>\r\n\r\n\r\n                        {quizLocal.questions.map((ele, index) => <QuizQuestion\r\n                            key={ele._id || ele.id}\r\n                            index={index}\r\n                            onDeleteFunc={() => handleOnDelete(ele.id || ele._id)}\r\n                            onChangeFunc={(e) => handleOnChangeQues(e, index)}\r\n                            quesObj={ele}\r\n                        />\r\n                        )}\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-6\">\r\n                                <Button className=\"addquestbtn mb-2\" onClick={handleAddQuesClick} > Add Next Question  </Button>\r\n                            </div>\r\n                            <div className=\"col-sm-6 text-center\">\r\n                                <Button className=\"createquiz mb-4\" type=\"submit\" > Update Quiz</Button>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n            </Container>) : <Spinner />\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        quiz: state.quiz,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    getQuiz,\r\n    updateQuiz,\r\n    deleteQuizQuestion,\r\n    setCurrentQuiz,\r\n    clearQuizErrors,\r\n    setAlert,\r\n})(EditQuiz);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\code\\CreateCodeQues.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\auth\\MessagePanel.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\actions\\alertActions.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizPage.js",["321","322","323"],"import React, { useEffect, useRef } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport QuizQues from './QuizQues';\r\nimport QuizTimer from './QuizTimer';\r\nimport Spinner from '../layout/Spinner';\r\nimport { connect } from 'react-redux';\r\nimport { getQuiz, submitQuiz } from '../../store/actions/quizActions';\r\nimport { loadUser, setUserNull } from '../../store/actions/authActions';\r\n\r\nconst QuizPage = (props) => {\r\n    const quizQuesRef = useRef(null);\r\n\r\n    const {\r\n        quiz: { current },\r\n        auth: { user },\r\n        loadUser,\r\n        getQuiz,\r\n        match\r\n    } = props;\r\n    const slug = match.params.slug;\r\n\r\n    useEffect(() => {\r\n        getQuiz(slug);\r\n        // loadUser(false, true);\r\n    }, []);\r\n\r\n\r\n    return (\r\n        current ?\r\n            (<Container className='mt-3'>\r\n                <Card.Header className='quiz_header'>\r\n                    <Row >\r\n                        <Col lg={9} md={8} sm={7} xs={8} className='quiz_title_col' >\r\n                            <div  >{current.title}</div>\r\n                        </Col>\r\n                        <Col lg={3} md={4} sm={5} xs={4} className='quiz_timer_col' >\r\n                            {/* <span className='time_sec float-right mt-1 pr-1' >{timer.minutes}:{timer.seconds}</span> */}\r\n                            {user && <QuizTimer endAt={user.testWillEndAt} triggerSubmit={() => quizQuesRef.current.click()} />}\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <QuizQues key={current._id} questions={current.questions} refProp={quizQuesRef} quizId={current._id} />\r\n                {/* <div className=\"text-center\" style={{ width: '200px', margin: 'auto' }}>\r\n                    <Button className=\"createquiz mb-4\" type=\"submit\"  >Submit Quiz</Button>\r\n                </div> */}\r\n            </Container>)\r\n            :\r\n            <Spinner />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    quiz: state.quiz,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, { getQuiz, submitQuiz, loadUser })(QuizPage);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizCardPage.js",["324","325","326","327","328"],"import React, { useEffect } from 'react';\r\nimport QuizCard from './QuizCard';\r\nimport Spinner from '../layout/Spinner';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getQuizzes } from '../../store/actions/quizActions';\r\n\r\nconst QuizCardPage = (props) => {\r\n    const {\r\n        auth: { user },\r\n        quiz: { quizzes, loading: quizLoading }, getQuizzes } = props;\r\n\r\n    useEffect(() => {\r\n        if (user?.role === 'faculty' || user?.role === 'admin') {\r\n            // getQuizzes(user._id);\r\n            getQuizzes();\r\n\r\n        }\r\n        else if (user?.role === 'student') {\r\n            getQuizzes();\r\n        }\r\n        return () => {\r\n\r\n        };\r\n    }, []);\r\n    // }, [user]);\r\n\r\n    if (quizzes !== null && quizzes.length === 0) {\r\n        return <h4>Currently There are No Quizzes Available</h4>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {quizzes ? quizzes.map((ele) => <QuizCard key={ele._id} quizObj={ele} />)\r\n                : <Spinner />\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    quiz: state.quiz,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, { getQuizzes })(QuizCardPage);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\sidebar\\SideBar.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeProblem.js",["329"],"import React, { useEffect } from 'react';\r\nimport AptiTopicsTemplate from './AptiTopicsTemplate';\r\nimport Spinner from '../layout/Spinner';\r\nimport { connect } from 'react-redux';\r\nimport { getCategoryAndTopic } from '../../store/actions/practiceProblemActions';\r\n\r\n\r\nconst PracticeProblem = (props) => {\r\n    const { practiceProblem: { catAndTopic }, getCategoryAndTopic } = props;\r\n\r\n    useEffect(() => {\r\n        getCategoryAndTopic();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {catAndTopic ?\r\n                <>\r\n                    { catAndTopic.distinctCategory.map((ele, index) => <AptiTopicsTemplate\r\n                        key={index}\r\n                        title={ele}\r\n                        topics={catAndTopic.distinctTopicByCat[index]}\r\n                    />)}\r\n                </>\r\n                : <Spinner />}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    practiceProblem: state.practiceProblem\r\n});\r\n\r\nexport default connect(mapStateToProps, { getCategoryAndTopic })(PracticeProblem);","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeQuizPage.js",["330","331","332","333"],"import React, { useEffect } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport PracticeQuizQues from './PracticeQuizQues';\r\nimport QuizTimer from '../quiz/QuizTimer';\r\nimport Spinner from '../layout/Spinner';\r\nimport { connect } from 'react-redux';\r\nimport { getPracticeProblems } from '../../store/actions/practiceProblemActions';\r\nimport { loadUser } from '../../store/actions/authActions';\r\n\r\nconst QuizPage = (props) => {\r\n    const {\r\n        practiceProblem: { questions },\r\n        auth: { user },\r\n        loadUser,\r\n        getPracticeProblems,\r\n        match\r\n    } = props;\r\n    const { categorySlug, topicSlug } = match.params;\r\n    console.log('params', match.params);\r\n\r\n    useEffect(() => {\r\n        getPracticeProblems(categorySlug, topicSlug);\r\n        // loadUser(false, true);\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            { questions ?\r\n                (<Container className='mt-3'>\r\n                    <Card.Header className='quiz_header'>\r\n                        <Row >\r\n                            <Col lg={9} md={8} sm={7} xs={8} className='quiz_title_col' >\r\n                                <div  >{questions[0]?.topic}</div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Card.Header>\r\n                    <PracticeQuizQues key={0} questions={questions} />\r\n                </Container>)\r\n                :\r\n                <Spinner />\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    practiceProblem: state.practiceProblem,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, { getPracticeProblems, loadUser })(QuizPage);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\AddTopics.js",["334"],"import React, { useState, useEffect } from \"react\";\r\nimport \"../quiz/quiz.css\";\r\nimport { Button, Container, Form } from \"react-bootstrap\";\r\nimport CreateAptiQuestion from \"./CreateAptiQuestion\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTopic, clearPracticeProblemErrors } from \"../../store/actions/practiceProblemActions\";\r\nimport { setAlert } from \"../../store/actions/alertActions\";\r\n\r\nconst AddTopics = (props) => {\r\n    const {\r\n        auth: { user },\r\n        practiceProblem: { error },\r\n        addTopic,\r\n        clearPracticeProblemErrors,\r\n        setAlert,\r\n    } = props;\r\n\r\n    const [aptiInfo, setAptiInfo] = useState({\r\n        topic: \"\",\r\n        category: \"quantitative analysis\",\r\n    });\r\n    const [apti, setApti] = useState([\r\n        {\r\n            id: 0,\r\n            author: \"\",\r\n            topic: \"\",\r\n            category: \"\",\r\n            question: \"\",\r\n            answers: [\"\", \"\", \"\", \"\"],\r\n            correctAnswer: \"\",\r\n            explanation: \"\",\r\n        },\r\n    ]);\r\n\r\n    const [lastId, setLastId] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            setAlert(error, \"danger\");\r\n            clearPracticeProblemErrors();\r\n        }\r\n    }, [error]);\r\n\r\n    const handleAddQuesClick = () => {\r\n        const newQuesObj = {\r\n            id: lastId + 1,\r\n            author: aptiInfo.author,\r\n            topic: aptiInfo.topic,\r\n            category: aptiInfo.category,\r\n            question: \"\",\r\n            answers: [\"\", \"\", \"\", \"\"],\r\n            correctAnswer: \"\",\r\n            explanation: \"\",\r\n        };\r\n\r\n        setLastId(lastId + 1);\r\n\r\n        const newQuesArray = [...apti, newQuesObj];\r\n        setApti(newQuesArray);\r\n    };\r\n\r\n    const handleOnChangeQues = (e, index) => {\r\n        const quesArray = [...apti];\r\n        if (\r\n            e.target.name === \"question\" ||\r\n            e.target.name === \"correctAnswer\" ||\r\n            e.target.name === \"explanation\"\r\n        ) {\r\n            quesArray[index][e.target.name] = e.target.value;\r\n            setApti(quesArray);\r\n        } else {\r\n            let optIndex = 0;\r\n            if (e.target.name === \"optionB\") {\r\n                optIndex = 1;\r\n            } else if (e.target.name === \"optionC\") {\r\n                optIndex = 2;\r\n            } else if (e.target.name === \"optionD\") {\r\n                optIndex = 3;\r\n            }\r\n            quesArray[index].answers[optIndex] = e.target.value;\r\n            setApti(quesArray);\r\n        }\r\n    };\r\n\r\n    const handleOnChange = (e) => {\r\n        setAptiInfo({\r\n            ...aptiInfo,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleOnDelete = (eleId) => {\r\n        const newQuesArray = apti.filter((ele) => {\r\n            return ele.id !== eleId;\r\n        });\r\n        setApti(newQuesArray);\r\n    };\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (aptiInfo.topic === \"\") {\r\n            setAlert(\"Please enter topic\", \"danger\");\r\n        } else {\r\n            let tempApti = apti.map((ele) => {\r\n                ele.topic = aptiInfo.topic;\r\n                ele.category = aptiInfo.category;\r\n                ele.author = user._id;\r\n                return ele;\r\n            });\r\n            // addTopic(tempApti);\r\n            // {\r\n            //     aptiQuestions : []\r\n            // }\r\n            console.log(\"temp\", tempApti);\r\n            addTopic({\r\n                aptiQuestions: tempApti,\r\n            });\r\n\r\n            setAptiInfo({\r\n                topic: \"\",\r\n                category: \"quantitative analysis\",\r\n            });\r\n\r\n            setApti([\r\n                {\r\n                    id: 0,\r\n                    author: \"\",\r\n                    topic: \"\",\r\n                    category: \"\",\r\n                    question: \"\",\r\n                    answers: [\"\", \"\", \"\", \"\"],\r\n                    correctAnswer: \"\",\r\n                    explanation: \"\",\r\n                },\r\n            ]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container className=\"container-quiz\">\r\n            <h3 className=\"text-center  mb-2 pt-4 \">TOPIC DETAILS</h3>\r\n            <div className=\"title-border mb-4\">\r\n                <span></span>\r\n            </div>\r\n            <div className=\"createquizform pb-1\">\r\n                <Form onSubmit={onSubmit}>\r\n                    <div className=\"row mb-2\">\r\n                        <div className=\"col-sm-6\">\r\n                            <Form.Group controlId=\"topic\">\r\n                                <Form.Label>\r\n                                    <b>Enter Topic</b>\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    className=\"quiz-inputFiled\"\r\n                                    name=\"topic\"\r\n                                    value={aptiInfo.topic}\r\n                                    onChange={handleOnChange}\r\n                                    placeholder=\"Enter Topic\"\r\n                                />\r\n                            </Form.Group>\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                            <Form.Group controlId=\"category\">\r\n                                <Form.Label>\r\n                                    <b>Select Category</b>\r\n                                </Form.Label>\r\n                                <Form.Group controlId=\"SelectRowsPerpage\">\r\n                                    <Form.Control\r\n                                        as=\"select\"\r\n                                        className=\"quiz-inputFiled\"\r\n                                        name=\"category\"\r\n                                        value={aptiInfo.category}\r\n                                        onChange={handleOnChange}\r\n                                    >\r\n                                        <option\r\n                                            className=\"optionSelect\"\r\n                                            value=\"quantitative analysis\"\r\n                                        >\r\n                                            Quantitative Analysis\r\n                                        </option>\r\n                                        <option\r\n                                            className=\"optionSelect\"\r\n                                            value=\"logical reasoning\"\r\n                                        >\r\n                                            Logical Reasoning\r\n                                        </option>\r\n                                        <option\r\n                                            className=\"optionSelect\"\r\n                                            value=\"verbal ability\"\r\n                                        >\r\n                                            Verbal Ability\r\n                                        </option>\r\n                                        <option\r\n                                            className=\"optionSelect\"\r\n                                            value=\"other topics\"\r\n                                        >\r\n                                            Other Topics\r\n                                        </option>\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                    <hr></hr>\r\n                    <h3 className=\"text-center  mb-2 pt-2 \">ADD QUESTIONS</h3>\r\n                    <div className=\"title-border mb-3\">\r\n                        <span></span>\r\n                    </div>\r\n\r\n                    {/* Questions Samples start Here */}\r\n                    {apti.map((ele, index) => (\r\n                        <CreateAptiQuestion\r\n                            key={ele.id}\r\n                            index={index}\r\n                            onDeleteFunc={() => handleOnDelete(ele.id)}\r\n                            onChangeFunc={(e) => handleOnChangeQues(e, index)}\r\n                            quesObj={ele}\r\n                        />\r\n                    ))}\r\n                    {/* Question sample end here */}\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-6\">\r\n                            <Button\r\n                                className=\"addquestbtn mb-2\"\r\n                                onClick={handleAddQuesClick}\r\n                            >\r\n                                {\" \"}\r\n                                Add Next Question{\" \"}\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"col-sm-6 text-center\">\r\n                            <Button className=\"createquiz mb-4\" type=\"submit\">\r\n                                Add Topic\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.auth,\r\n        practiceProblem: state.practiceProblem,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { addTopic, clearPracticeProblemErrors, setAlert })(AddTopics);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\EditPracticeProblem.js",["335","336","337"],"import React, { useState, useEffect } from 'react';\r\nimport '../quiz/quiz.css';\r\nimport { Button, Container, Form } from 'react-bootstrap';\r\nimport CreateAptiQuestion from './CreateAptiQuestion';\r\nimport { connect } from 'react-redux';\r\nimport { updatePracticeProblem, getPracticeProblem, clearPracticeProblemErrors } from '../../store/actions/practiceProblemActions';\r\nimport { setAlert } from \"../../store/actions/alertActions\";\r\n\r\nconst EditPracticeProblem = (props) => {\r\n    const { auth: { user },\r\n        practiceProblem: { current, error },\r\n        updatePracticeProblem,\r\n        getPracticeProblem,\r\n        clearPracticeProblemErrors,\r\n        setAlert,\r\n        match\r\n    } = props;\r\n    const id = match.params.id;\r\n\r\n    useEffect(() => {\r\n        getPracticeProblem(id);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            setAlert(error, \"danger\");\r\n            clearPracticeProblemErrors();\r\n        }\r\n        if (current !== null) {\r\n            let tempDeepCopy = JSON.parse(JSON.stringify(current));\r\n\r\n            setApti(tempDeepCopy);\r\n        } else {\r\n            setApti({\r\n                author: '',\r\n                topic: '',\r\n                category: 'quantitative analysis',\r\n                question: '',\r\n                answers: ['', '', '', ''],\r\n                correctAnswer: '',\r\n                explanation: ''\r\n            });\r\n        }\r\n    }, [current, error]);\r\n\r\n    const [apti, setApti] = useState({\r\n        author: '',\r\n        topic: '',\r\n        category: 'quantitative analysis',\r\n        question: '',\r\n        answers: ['', '', '', ''],\r\n        correctAnswer: '',\r\n        explanation: ''\r\n    });\r\n\r\n    const handleOnChangeQues = (e, index) => {\r\n        const quesObj = { ...apti };\r\n        if (e.target.name === 'question' || e.target.name === 'correctAnswer' || e.target.name === 'explanation') {\r\n            quesObj[e.target.name] = e.target.value;\r\n            setApti(quesObj);\r\n        }\r\n        else {\r\n            let optIndex = 0;\r\n            if (e.target.name === 'optionB') {\r\n                optIndex = 1;\r\n            }\r\n            else if (e.target.name === 'optionC') {\r\n                optIndex = 2;\r\n            }\r\n            else if (e.target.name === 'optionD') {\r\n                optIndex = 3;\r\n            }\r\n            quesObj.answers[optIndex] = e.target.value;\r\n            setApti(quesObj);\r\n        }\r\n\r\n    };\r\n\r\n    const handleOnChange = (e) => {\r\n        setApti({\r\n            ...apti,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // addTopic(tempApti);\r\n        // {\r\n        //     aptiQuestions : []\r\n        // }\r\n        console.log('temp', apti);\r\n        updatePracticeProblem(apti);\r\n\r\n        // setApti([{\r\n        //     id: 0,\r\n        //     author: aptiInfo.author,\r\n        //     topic: aptiInfo.topic,\r\n        //     category: aptiInfo.category,\r\n        //     question: '',\r\n        //     answers: ['', '', '', ''],\r\n        //     correctAnswer: '',\r\n        //     explanation: ''\r\n        // }]);\r\n    };\r\n\r\n    return (\r\n        <Container className=\"container-quiz\">\r\n            <h3 className=\"text-center  mb-2 pt-4 \">TOPIC DETAILS</h3>\r\n            <div className=\"title-border mb-4\">\r\n                <span></span>\r\n            </div>\r\n            <div className=\"createquizform pb-1\">\r\n                <Form onSubmit={onSubmit}  >\r\n                    <div className=\"row mb-2\">\r\n                        <div className=\"col-sm-6\">\r\n                            <Form.Group controlId=\"topic\" >\r\n                                <Form.Label><b>Enter Topic</b></Form.Label>\r\n                                <Form.Control className=\"quiz-inputFiled\" name=\"topic\" value={apti.topic} onChange={handleOnChange} placeholder=\"Enter Topic\" />\r\n                            </Form.Group>\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                            <Form.Group controlId=\"category\" >\r\n                                <Form.Label><b>Select Category</b></Form.Label>\r\n                                <Form.Group controlId=\"SelectRowsPerpage\">\r\n                                    <Form.Control as=\"select\" className=\"quiz-inputFiled\" name='category' value={apti.category} onChange={handleOnChange}  >\r\n                                        <option className=\"optionSelect\" value='quantitative analysis'  >Quantitative Analysis</option>\r\n                                        <option className=\"optionSelect\" value='logical reasoning'  >Logical Reasoning</option>\r\n                                        <option className=\"optionSelect\" value='verbal ability' >Verbal Ability</option>\r\n                                        <option className=\"optionSelect\" value='other topics' >Other Topics</option>\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Form.Group>\r\n                        </div>\r\n                    </div>\r\n                    <hr></hr>\r\n                    <h3 className=\"text-center  mb-2 pt-2 \">ADD QUESTIONS</h3>\r\n                    <div className=\"title-border mb-3\">\r\n                        <span></span>\r\n                    </div>\r\n\r\n                    {/* Questions Samples start Here */}\r\n                    <CreateAptiQuestion\r\n                        key={apti._id}\r\n                        index={0}\r\n                        onChangeFunc={(e) => handleOnChangeQues(e, 0)}\r\n                        quesObj={apti} />\r\n                    {/* Question sample end here */}\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-4 text-center\" style={{ margin: 'auto' }}>\r\n                            <Button className=\"createquiz mb-4\" type='submit' >Update</Button>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return ({\r\n        auth: state.auth,\r\n        practiceProblem: state.practiceProblem\r\n    });\r\n};\r\n\r\nexport default connect(mapStateToProps, { updatePracticeProblem, getPracticeProblem, setAlert, clearPracticeProblemErrors })(EditPracticeProblem);","E:\\project\\PlacePrep\\client\\src\\components\\layout\\Navbar.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\Coding.js",["338"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport \"./Coding.css\";\r\nimport { Row, Col, Tabs, Tab } from \"react-bootstrap\";\r\nimport CodeDescription from \"./CodeDescription\";\r\nimport CodingSolution from \"./CodingSolution\";\r\nimport CodeEditor from \"./CodeEditor\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getQuestion } from \"../../store/actions/codeActions\";\r\nimport Spinner from '../layout/Spinner';\r\n\r\nconst Coding = (props) => {\r\n\r\n    const { getQuestion } = props;\r\n    const { current } = props.code;\r\n    const { slug } = useParams();\r\n\r\n    useEffect(() => {\r\n        getQuestion(slug);\r\n    }, []);\r\n\r\n    const [key, setKey] = useState(\"description\");\r\n\r\n    return (\r\n        <Fragment>\r\n            { current !== null ?\r\n                <Row className=\"coding-container\">\r\n                    <Col>\r\n                        <Tabs className='navTabs' activeKey={key} onSelect={(e) => setKey(e)}>\r\n                            <Tab eventKey=\"description\" title={<span><i className=\"fa fa-list-alt\" aria-hidden=\"true\"></i>Description</span>}>\r\n                                <CodeDescription current={current} />\r\n                            </Tab>\r\n                            {/* {current.solution &&} */}\r\n                            <Tab eventKey=\"solution\" title={<span><i className=\"fa fa-flask\" aria-hidden=\"true\"></i>Solution</span>}>\r\n                                <CodingSolution current={current} />\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Col>\r\n                    <Col className=\"editor-container\">\r\n                        <CodeEditor slugProp={slug} inputs={current.noOfInputs} quesId={current._id} />\r\n                    </Col>\r\n                </Row> : <Spinner />}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    code: state.code\r\n});\r\n\r\nexport default connect(mapStateToProps, { getQuestion })(Coding);","E:\\project\\PlacePrep\\client\\src\\components\\code\\CodeQuestions.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodingSub.js",["339"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport \"../Coding.css\";\r\nimport { Row, Col, Tabs, Tab } from \"react-bootstrap\";\r\nimport CodeDescription from \"../CodeDescription\";\r\nimport CodingSolution from \"../CodingSolution\";\r\nimport CodeEditorSub from \"./CodeEditorSub\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCodeSubmission } from \"../../../store/actions/codeActions\";\r\nimport Spinner from '../../layout/Spinner';\r\n\r\nconst CodingSub = (props) => {\r\n\r\n    const { getCodeSubmission } = props;\r\n    const { currentSubmission } = props.code;\r\n    const { id } = useParams();\r\n\r\n    useEffect(() => {\r\n        getCodeSubmission(id);\r\n    }, []);\r\n\r\n    const [key, setKey] = useState(\"description\");\r\n\r\n    return (\r\n        <Fragment>\r\n            { currentSubmission !== null ?\r\n                <Row className=\"coding-container\">\r\n                    <Col>\r\n                        <Tabs className='navTabs' activeKey={key} onSelect={(e) => setKey(e)}>\r\n                            <Tab eventKey=\"description\" title={<span><i className=\"fa fa-list-alt\" aria-hidden=\"true\"></i>Description</span>}>\r\n                                <CodeDescription current={currentSubmission.question} />\r\n                            </Tab>\r\n                            {/* {current.solution &&} */}\r\n                            <Tab eventKey=\"solution\" title={<span><i className=\"fa fa-flask\" aria-hidden=\"true\"></i>Solution</span>}>\r\n                                <CodingSolution current={currentSubmission.question} />\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Col>\r\n                    <Col className=\"editor-container\">\r\n                        <CodeEditorSub\r\n                            key={currentSubmission.question._id}\r\n                            slugProp={currentSubmission.question.slug}\r\n                            userSolution={currentSubmission.userSolution}\r\n                            language={currentSubmission.language}\r\n                            inputs={currentSubmission.question.noOfInputs}\r\n                            quesId={currentSubmission.question._id} />\r\n                    </Col>\r\n                </Row> : <Spinner />}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    code: state.code\r\n});\r\n\r\nexport default connect(mapStateToProps, { getCodeSubmission })(CodingSub);","E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodeSubmissions.js",["340","341"],"import React, { useEffect, Fragment, useState, useRef } from 'react';\r\nimport \"../../code/CodeQuestDisp.css\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport CodeSubTabRow from './CodeSubTabRow';\r\nimport Spinner from '../../layout/Spinner';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\nimport Pagination from '../../code/Pagination';\r\nimport paginate from '../../code/paginate';\r\nimport {\r\n    getCodeSubmissions,\r\n    filterCodeSubmissions,\r\n    clearFilterCodeSub,\r\n} from '../../../store/actions/codeActions';\r\n\r\nconst CodeSubmissions = (props) => {\r\n    const { auth: { user },\r\n        code: { submissions, filteredSubmissions },\r\n        getCodeSubmissions,\r\n        filterCodeSubmissions,\r\n        clearFilterCodeSub,\r\n        match } = props;\r\n\r\n    const text = useRef('');\r\n\r\n    const [pageDetails, setPageDetails] = useState({\r\n        pageSize: 10,\r\n        currentPage: 1,\r\n        sortColumn: { path: \"submittedAt\", order: \"asc\" },\r\n    });\r\n    const { pageSize, currentPage, sortColumn } = pageDetails;\r\n\r\n\r\n    const { codeId } = match.params;\r\n\r\n    useEffect(() => {\r\n        if (user?.role === 'student') {\r\n            getCodeSubmissions({ user: user._id });\r\n        }\r\n        else if (user?.role === 'faculty') {\r\n            getCodeSubmissions({ code: codeId });\r\n        }\r\n        return () => {\r\n        };\r\n    }, [user]);\r\n\r\n    if (submissions !== null && submissions.length === 0) {\r\n        return <h4>Currently There are No Code Submissions.</h4>;\r\n    }\r\n\r\n    const handleFilterChange = (e) => {\r\n        if (text.current.value !== \"\") {\r\n            filterCodeSubmissions(e.target.value, user?.role === 'student' ? true : false);\r\n        } else {\r\n            clearFilterCodeSub();\r\n        }\r\n    };\r\n\r\n    const handlePageChange = (page) => {\r\n        setPageDetails({ ...pageDetails, currentPage: page });\r\n    };\r\n\r\n    const handleOnChange = (e) => {\r\n        setPageDetails({ ...pageDetails, pageSize: e.target.value });\r\n    };\r\n\r\n    const handleSort = (path) => {\r\n        const sortColumn = { ...pageDetails.sortColumn };\r\n        if (sortColumn.path === path)\r\n            sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\r\n        else {\r\n            sortColumn.path = path;\r\n            sortColumn.order = \"asc\";\r\n        }\r\n        setPageDetails({ ...pageDetails, sortColumn });\r\n    };\r\n\r\n    const filteredSub = filteredSubmissions !== null ? filteredSubmissions : submissions;\r\n\r\n    const sortedSub = _.orderBy(\r\n        filteredSub,\r\n        [\r\n            function (item) {\r\n                if (sortColumn.path === \"status\") {\r\n                    return item.status;\r\n                }\r\n                else if (sortColumn.path === 'name') {\r\n                    return item.user.name;\r\n                }\r\n                else if (sortColumn.path === 'submittedAt') {\r\n                    return new Date(item.createdAt).getTime();\r\n                }\r\n                else if (sortColumn.path === 'language') {\r\n                    return item.language;\r\n                }\r\n                else if (sortColumn.path === 'title') {\r\n                    return item.question.title;\r\n                }\r\n                else {\r\n                    return item.user.name.toLowerCase();\r\n                };\r\n\r\n            },\r\n        ],\r\n        [sortColumn.order]\r\n    );\r\n\r\n    const newSubmissions = paginate(sortedSub, currentPage, pageSize);\r\n    const subNumber = _.range(1, newSubmissions.length + 1);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            {submissions !== null ? (<Container className=\"container-codeQuest\">\r\n                <h3 className=\"text-center  mb-2 pt-4 \">\r\n                    Code Submissions\r\n        </h3>\r\n                <div className=\"title-border mb-4\">\r\n                    <span></span>\r\n                </div>\r\n                <div className=\"displayQuest pb-2\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 pb-2\">\r\n                            <Form>\r\n                                <Form.Group controlId=\"codingquestionSearch\">\r\n                                    <Form.Control\r\n                                        className=\" codingQuestSearch\"\r\n                                        type=\"text\"\r\n                                        ref={text}\r\n                                        placeholder=\"Search submissions\"\r\n                                        onChange={handleFilterChange}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </div>\r\n                    </div>\r\n                    <div className='table-responsive' >\r\n                        <table className=\"table  \">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">#</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(`${user?.role === 'student' ? 'title' : 'name'}`)}>{user?.role === 'student' ? 'Title' : 'Name'}</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(\"submittedAt\")} >Submitted At</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(\"language\")} >Language</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(\"status\")} >Status</th>\r\n                                    {user?.role === 'student' && <th scope=\"col\">Operation</th>}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"tbodyCode\">\r\n                                {/* {submissions.map((ele, index) => <QuizSubTabRow key={ele._id} name={ele.user.name} eleObj={ele} idx={index} />)} */}\r\n                                {newSubmissions.map((ele, index) => <CodeSubTabRow key={ele._id} name={ele.user.name} eleObj={ele} idx={index} />)}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"ml-3 \">\r\n                            <Form>\r\n                                <Form.Group controlId=\"SelectRowsPerpage\">\r\n                                    <Form.Control\r\n                                        as=\"select\"\r\n                                        className=\"dispCode-inputFiled rowsPerPg\"\r\n                                        value={pageSize}\r\n                                        onChange={handleOnChange}\r\n                                    >\r\n                                        <option value={10} className=\"optionSelect\">\r\n                                            10\r\n                                </option>\r\n                                        <option value={25} className=\"optionSelect\">\r\n                                            25\r\n                                </option>\r\n                                        <option value={50} className=\"optionSelect\">\r\n                                            50\r\n                                </option>\r\n                                        <option value={100} className=\"optionSelect\">\r\n                                            100\r\n                                </option>\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </div>\r\n                        <span className=\"labelRowsPerPg mt-2 col-4\">\r\n                            rows per page.\r\n                </span>\r\n                        <Pagination\r\n                            itemCounts={filteredSub.length}\r\n                            pageSize={pageSize}\r\n                            currentPage={currentPage}\r\n                            onPageChange={handlePageChange}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </Container>) :\r\n                (\r\n                    <Spinner />\r\n                )\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    code: state.code,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getCodeSubmissions,\r\n    filterCodeSubmissions,\r\n    clearFilterCodeSub\r\n})(CodeSubmissions);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizPageSub.js",["342","343"],"import React, { useEffect, useState } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport QuizQuesSub from './QuizQuesSub';\r\nimport Spinner from '../../layout/Spinner';\r\nimport { connect } from 'react-redux';\r\nimport { getQuizSubmission } from '../../../store/actions/quizActions';\r\n\r\nconst QuizPageSub = (props) => {\r\n    const {\r\n        quiz: { currentSubmission },\r\n        getQuizSubmission,\r\n        match\r\n    } = props;\r\n    const quizSubId = match.params.id;\r\n\r\n    useEffect(() => {\r\n        getQuizSubmission(quizSubId);\r\n    }, []);\r\n\r\n\r\n    return (\r\n        (currentSubmission && currentSubmission.quiz.questions) ?\r\n            (<Container className='mt-3'>\r\n                <Card.Header className='quiz_header'>\r\n                    <Row >\r\n                        <Col lg={9} md={8} sm={7} xs={8} className='quiz_title_col' >\r\n                            <div  >{currentSubmission.quiz.title}</div>\r\n                        </Col>\r\n                        <Col lg={3} md={4} sm={5} xs={4} className='quiz_timer_col' >\r\n                            <span className='time_sec float-right mt-1 pr-1' >{currentSubmission.timeTaken.minutes < 10 ? `0${currentSubmission.timeTaken.minutes}` : currentSubmission.timeTaken.minutes}:{currentSubmission.timeTaken.seconds < 10 ? `0${currentSubmission.timeTaken.seconds}` : currentSubmission.timeTaken.seconds}</span>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <QuizQuesSub key={currentSubmission._id} userAns={currentSubmission.userAnswers} questions={currentSubmission.quiz.questions} quizId={currentSubmission.quiz._id} />\r\n            </Container>)\r\n            :\r\n            <Spinner />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    quiz: state.quiz\r\n});\r\n\r\nexport default connect(mapStateToProps, { getQuizSubmission })(QuizPageSub);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizSubmissions.js",["344","345","346","347","348"],"import React, { useEffect, Fragment, useState, useRef } from 'react';\r\nimport \"../../code/CodeQuestDisp.css\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport QuizSubTabRow from './QuizSubTabRow';\r\nimport Spinner from '../../layout/Spinner';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\nimport Pagination from '../../code/Pagination';\r\nimport paginate from '../../code/paginate';\r\nimport {\r\n    getQuizSubmissions,\r\n    getQuizSubmission,\r\n    filterQuizSubmissions,\r\n    clearFilterQuizSub\r\n} from '../../../store/actions/quizActions';\r\n\r\nconst QuizSubmissions = (props) => {\r\n    const { auth: { user },\r\n        quiz: { submissions, filteredSubmissions },\r\n        getQuizSubmissions,\r\n        getQuizSubmission,\r\n        filterQuizSubmissions,\r\n        clearFilterQuizSub,\r\n        match } = props;\r\n\r\n    const text = useRef('');\r\n\r\n    const [pageDetails, setPageDetails] = useState({\r\n        pageSize: 10,\r\n        currentPage: 1,\r\n        sortColumn: { path: \"submittedAt\", order: \"asc\" },\r\n    });\r\n    const { pageSize, currentPage, sortColumn } = pageDetails;\r\n\r\n\r\n    const { quizId } = match.params;\r\n\r\n    useEffect(() => {\r\n        if (user?.role === 'student') {\r\n            getQuizSubmissions({ user: user._id });\r\n        }\r\n        else if (user?.role === 'faculty') {\r\n            getQuizSubmissions({ quiz: quizId });\r\n        }\r\n        return () => {\r\n        };\r\n    }, [user]);\r\n\r\n    if (submissions !== null && submissions.length === 0) {\r\n        return <h4>Currently There are No Quiz Submissions.</h4>;\r\n    }\r\n\r\n    const handleFilterChange = (e) => {\r\n        if (text.current.value !== \"\") {\r\n            filterQuizSubmissions(e.target.value, user?.role === 'student' ? true : false);\r\n        } else {\r\n            clearFilterQuizSub();\r\n        }\r\n    };\r\n\r\n    const handlePageChange = (page) => {\r\n        setPageDetails({ ...pageDetails, currentPage: page });\r\n    };\r\n\r\n    const handleOnChange = (e) => {\r\n        setPageDetails({ ...pageDetails, pageSize: e.target.value });\r\n    };\r\n\r\n    const handleSort = (path) => {\r\n        const sortColumn = { ...pageDetails.sortColumn };\r\n        if (sortColumn.path === path)\r\n            sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\r\n        else {\r\n            sortColumn.path = path;\r\n            sortColumn.order = \"asc\";\r\n        }\r\n        setPageDetails({ ...pageDetails, sortColumn });\r\n    };\r\n\r\n    const filteredSub = filteredSubmissions !== null ? filteredSubmissions : submissions;\r\n\r\n    const sortedSub = _.orderBy(\r\n        filteredSub,\r\n        [\r\n            function (item) {\r\n                if (sortColumn.path === \"score\") {\r\n                    return item.score;\r\n                }\r\n                else if (sortColumn.path === 'name') {\r\n                    return item.user.name;\r\n                }\r\n                else if (sortColumn.path === 'submittedAt') {\r\n                    return new Date(item.createdAt).getTime();\r\n                }\r\n                else if (sortColumn.path === 'timeTaken') {\r\n                    let min = item.timeTaken.minutes;\r\n                    let sec = item.timeTaken.seconds;\r\n                    let totTimeInSec = (min * 60) + sec;\r\n                    return totTimeInSec;\r\n                }\r\n                else if (sortColumn.path === 'title') {\r\n                    return item.quiz.title;\r\n                }\r\n                else {\r\n                    return item.user.name.toLowerCase();\r\n                };\r\n\r\n            },\r\n        ],\r\n        [sortColumn.order]\r\n    );\r\n\r\n    const newSubmissions = paginate(sortedSub, currentPage, pageSize);\r\n    const subNumber = _.range(1, newSubmissions.length + 1);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            {submissions !== null ? (<Container className=\"container-codeQuest\">\r\n                <h3 className=\"text-center  mb-2 pt-4 \">\r\n                    Quiz Submissions\r\n        </h3>\r\n                <div className=\"title-border mb-4\">\r\n                    <span></span>\r\n                </div>\r\n                <div className=\"displayQuest pb-2\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 pb-2\">\r\n                            <Form>\r\n                                <Form.Group controlId=\"codingquestionSearch\">\r\n                                    <Form.Control\r\n                                        className=\" codingQuestSearch\"\r\n                                        type=\"text\"\r\n                                        ref={text}\r\n                                        placeholder=\"Search submissions\"\r\n                                        onChange={handleFilterChange}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </div>\r\n                    </div>\r\n                    <div className='table-responsive' >\r\n                        <table className=\"table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">#</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(`${user?.role === 'student' ? 'title' : 'name'}`)}>{user?.role === 'student' ? 'Title' : 'Name'}</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(\"submittedAt\")} >Submitted At</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(\"timeTaken\")} >Time Taken</th>\r\n                                    <th scope=\"col\" onClick={() => handleSort(\"score\")} >Score</th>\r\n                                    {(user?.role === 'faculty' || user?.role === 'admin') && <th scope=\"col\">Operation</th>}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"tbodyCode\">\r\n                                {/* {submissions.map((ele, index) => <QuizSubTabRow key={ele._id} name={ele.user.name} eleObj={ele} idx={index} />)} */}\r\n                                {newSubmissions.map((ele, index) => <QuizSubTabRow key={ele._id} name={ele.user.name} eleObj={ele} idx={index} />)}\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"ml-3 \">\r\n                            <Form>\r\n                                <Form.Group controlId=\"SelectRowsPerpage\">\r\n                                    <Form.Control\r\n                                        as=\"select\"\r\n                                        className=\"dispCode-inputFiled rowsPerPg\"\r\n                                        value={pageSize}\r\n                                        onChange={handleOnChange}\r\n                                    >\r\n                                        <option value={10} className=\"optionSelect\">\r\n                                            10\r\n                                </option>\r\n                                        <option value={25} className=\"optionSelect\">\r\n                                            25\r\n                                </option>\r\n                                        <option value={50} className=\"optionSelect\">\r\n                                            50\r\n                                </option>\r\n                                        <option value={100} className=\"optionSelect\">\r\n                                            100\r\n                                </option>\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </div>\r\n                        <span className=\"labelRowsPerPg mt-2 col-4\">\r\n                            rows per page.\r\n                </span>\r\n                        <Pagination\r\n                            itemCounts={filteredSub.length}\r\n                            pageSize={pageSize}\r\n                            currentPage={currentPage}\r\n                            onPageChange={handlePageChange}\r\n                        />\r\n\r\n                        <div className=\" paginatt \">\r\n                            <nav aria-label=\"Page navigation example\">\r\n                                <ul className=\"pagination nav2\">\r\n                                    <li className=\"\">\r\n                                        <a\r\n                                            className=\"page-link\"\r\n                                            href=\"#\"\r\n                                            aria-label=\"Previous\"\r\n                                        >\r\n                                            <span\r\n                                                aria-hidden=\"true\"\r\n                                                className=\"pagntColor\"\r\n                                            >\r\n                                                &laquo;\r\n                                    </span>\r\n                                        </a>\r\n                                    </li>\r\n                                    <li className=\" \">\r\n                                        <a\r\n                                            className=\"page-link pagntColor\"\r\n                                            href=\"#1\"\r\n                                        >\r\n                                            1\r\n                                </a>\r\n                                    </li>\r\n                                    <li className=\"active\">\r\n                                        <a\r\n                                            className=\"page-link pagntColor \"\r\n                                            href=\"#2\"\r\n                                        >\r\n                                            2\r\n                                </a>\r\n                                    </li>\r\n                                    <li className=\" \">\r\n                                        <a\r\n                                            className=\"page-link pagntColor \"\r\n                                            href=\"#3\"\r\n                                        >\r\n                                            3\r\n                                </a>\r\n                                    </li>\r\n                                    <li className=\"\">\r\n                                        <a\r\n                                            className=\"page-link\"\r\n                                            href=\"#\"\r\n                                            aria-label=\"Next\"\r\n                                        >\r\n                                            <span\r\n                                                aria-hidden=\"true\"\r\n                                                className=\"pagntColor\"\r\n                                            >\r\n                                                &raquo;\r\n                                    </span>\r\n                                        </a>\r\n                                    </li>\r\n                                </ul>\r\n                            </nav>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Container>) :\r\n                (\r\n                    <Spinner />\r\n                )\r\n            }\r\n        </Fragment >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    quiz: state.quiz,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getQuizSubmissions,\r\n    getQuizSubmission,\r\n    filterQuizSubmissions,\r\n    clearFilterQuizSub,\r\n})(QuizSubmissions);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\Dashboard.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\actions\\actionTypes.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\actions\\quizActions.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\AptiTopicsTemplate.js",[],"E:\\project\\PlacePrep\\client\\src\\store\\actions\\practiceProblemActions.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\sidebar\\MenuList.js",["349","350"],"import React, { useState, useEffect, useLayoutEffect } from 'react';\r\nimport { AnimatePresence, motion } from 'framer-motion';\r\nimport { Link } from 'react-router-dom';\r\nimport * as menuItemArrays from './MenuItemData';\r\nimport { connect } from 'react-redux';\r\n\r\nconst MenuList = (props) => {\r\n    const { auth: { user } } = props;\r\n\r\n    useEffect(() => {\r\n        if (user !== null) {\r\n            if (user.role === 'faculty') {\r\n                setMenuItems(menuItemArrays.faculty);\r\n            }\r\n            else if (user.role === 'admin') {\r\n                setMenuItems(menuItemArrays.admin);\r\n            }\r\n            else {\r\n                setMenuItems(menuItemArrays.student);\r\n            }\r\n        } else {\r\n            setMenuItems(menuItemArrays.student);\r\n        }\r\n    }, [user]);\r\n\r\n    let [menuItems, setMenuItems] = useState(menuItemArrays.student);\r\n\r\n\r\n    const [selected, setSelected] = useState(menuItems[0].name);\r\n    const [subMenus, setSubMenus] = useState({});\r\n\r\n    useLayoutEffect(() => {\r\n        let path = window.location.pathname;\r\n        if (path !== '/') {\r\n            path = path.endsWith('/') ? path.replace(/\\/$/, \"\") : path;\r\n        }\r\n        const parts = path.split('/');\r\n\r\n        if (parts.length !== 3) {\r\n            const selectedItem = menuItems.filter((ele) => {\r\n                return ele.to === path;\r\n            })[0];\r\n            setSelected(selectedItem?.name);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const newSubMenus = {};\r\n\r\n        menuItems.forEach((ele, index) => {\r\n            const hasSubMenus = !!ele.subMenuItems.length;\r\n\r\n            if (hasSubMenus) {\r\n                newSubMenus[index] = {};\r\n                newSubMenus[index]['isOpen'] = false;\r\n                newSubMenus[index]['selectedSubMenu'] = null;\r\n            }\r\n\r\n            let path = window.location.pathname;\r\n            path = path.endsWith('/') ? path.replace(/\\/$/, \"\") : path;\r\n            const parts = path.split('/');\r\n\r\n            let selectedItemIndex;\r\n            let selectedSubItemIndex;\r\n            if (parts.length === 3) {\r\n                const selectedItem = menuItems.filter((ele, index) => {\r\n                    if (ele.to === '/' + parts[1]) {\r\n                        selectedItemIndex = index;\r\n                    }\r\n                    return ele.to === '/' + parts[1];\r\n                })[0];\r\n\r\n                // const selectedItem = parts[1].toLowerCase();\r\n\r\n                selectedItem?.subMenuItems.filter((subEle, index) => {\r\n                    if (subEle.to === '/' + parts[2]) {\r\n                        selectedSubItemIndex = index;\r\n                    }\r\n                    return subEle.to === '/' + parts[2];\r\n                });\r\n\r\n                // const subSelectedItem = parts[2].toLowerCase();\r\n                // const selectedItemIndex = menuItems.findIndex(item => item.name.toLowerCase() === selectedItem);\r\n                // const selectedSubItemIndex = menuItems[selectedItemIndex] && menuItems[selectedItemIndex].subMenuItems.findIndex(subItem => subItem.name.toLowerCase() === subSelectedItem);\r\n\r\n                setSelected(selectedItem?.name);\r\n                if (selectedItemIndex !== -1) {\r\n                    newSubMenus[selectedItemIndex] = {};\r\n                    newSubMenus[selectedItemIndex]['isOpen'] = true;\r\n                }\r\n                if (selectedItemIndex !== -1 && selectedSubItemIndex !== -1) {\r\n                    newSubMenus[selectedItemIndex]['selectedSubMenu'] = selectedSubItemIndex;\r\n                }\r\n            }\r\n\r\n            setSubMenus(newSubMenus);\r\n        });\r\n    }, []);\r\n\r\n    const handleMenuItemClick = (name, index) => {\r\n        setSelected(name);\r\n\r\n        if (subMenus.hasOwnProperty(index)) {\r\n            const subMenusCopy = { ...subMenus };\r\n\r\n            subMenusCopy[index]['isOpen'] = !subMenus[index]['isOpen'];\r\n            subMenusCopy[index]['selectedSubMenu'] = null;\r\n            setSubMenus(subMenusCopy);\r\n        }\r\n        else {\r\n            const subMenusCopy = { ...subMenus };\r\n\r\n            for (let item in subMenus) {\r\n                subMenusCopy[item]['isOpen'] = false;\r\n                subMenusCopy[item]['selectedSubMenu'] = null;\r\n            }\r\n            setSubMenus(subMenusCopy);\r\n        }\r\n\r\n    };\r\n\r\n    const handleSubMenuItemClick = (menuItemIdx, subMenuIdx) => {\r\n        const subMenusCopy = { ...subMenus };\r\n        subMenusCopy[menuItemIdx]['selectedSubMenu'] = subMenuIdx;\r\n\r\n        setSubMenus(subMenusCopy);\r\n    };\r\n\r\n    return (\r\n        user ? <ul className='menu-list'>\r\n            {menuItems.map((ele, index) => {\r\n                const isItemSelected = selected === ele.name;\r\n                const hasSubMenus = !!ele.subMenuItems.length;\r\n                const isOpen = subMenus[index] && subMenus[index].isOpen;\r\n\r\n                const SubMenuListJSX = <div className='submenu-list'>\r\n                    <ul>\r\n                        {ele.subMenuItems.map((subMenuEle, subMenuIndex) => {\r\n                            const isSubMenuSelected = (subMenus[index] && subMenus[index].selectedSubMenu) === subMenuIndex;\r\n\r\n                            return (<Link key={subMenuIndex} to={`${ele.to}${subMenuEle.to}`} style={{ textDecoration: 'none' }} >\r\n                                <li className={`submenu-item ${isSubMenuSelected ? 'active' : ''}`} onClick={() => handleSubMenuItemClick(index, subMenuIndex)} >\r\n                                    <i className={`${subMenuEle.icon} menu-icon`} ></i>\r\n                                    <span className='menu-text' >{subMenuEle.name}</span>\r\n                                </li>\r\n                            </Link>);\r\n                        })}\r\n                    </ul>\r\n                </div>;\r\n\r\n\r\n                return ele.subMenuItems.length ?\r\n                    (<div key={index} >\r\n                        <Link to={ele.to} style={{ textDecoration: 'none' }}>\r\n                            <li className={`menu-item ${isItemSelected ? 'active' : ''}`} onClick={() => handleMenuItemClick(ele.name, index)} >\r\n                                <i className={`${ele.icon} menu-icon`} ></i>\r\n                                <span className='menu-text' >{ele.name}</span>\r\n                                {isOpen ? <i className=\"fas fa-angle-up dropdown-icon\" style={{ paddingTop: '4px' }}></i>\r\n                                    : <i className=\"fas fa-angle-down dropdown-icon\" style={{ paddingTop: '7px' }} ></i>}\r\n\r\n                            </li>\r\n                        </Link>\r\n                        <AnimatePresence>\r\n                            {(hasSubMenus && isOpen) &&\r\n                                <motion.nav\r\n                                    initial={{ opacity: 0, y: -15 }}\r\n                                    animate={{ opacity: 1, y: 0 }}\r\n                                    transition={{ duration: 0.35 }}\r\n                                    exit={{ opacity: 0, x: -30 }}\r\n                                >\r\n                                    {SubMenuListJSX}\r\n                                </motion.nav>\r\n                            }\r\n                        </AnimatePresence>\r\n                    </div>)\r\n                    :\r\n                    (<Link key={index} to={ele.to} style={{ textDecoration: 'none' }}>\r\n                        <li className={`menu-item ${isItemSelected ? 'active' : ''}`} onClick={() => handleMenuItemClick(ele.name, index)} >\r\n                            <i className={`${ele.icon} menu-icon`} ></i>\r\n                            <span className='menu-text' >{ele.name}</span>\r\n                        </li>\r\n                    </Link>);\r\n            }\r\n\r\n            )}\r\n        </ul> : <h3>Loading...</h3>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(MenuList);\r\n","E:\\project\\PlacePrep\\client\\src\\store\\actions\\codeActions.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\layout\\Spinner.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizTimer.js",["351","352","353"],"import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst QuizTimer = (props) => {\r\n\r\n    let durInSec = Math.round((new Date(props.endAt).getTime() - new Date().getTime()) / 1000);\r\n    let durMin = Math.floor(durInSec / 60);\r\n    let durSec = durInSec % 60;\r\n\r\n    const [countdownDate, setCountdownDate] = useState(new Date(props.endAt).getTime());\r\n    const [timer, setTimer] = useState({\r\n        minutes: durMin,\r\n        seconds: durSec\r\n    });\r\n\r\n    let myInterval;\r\n    useEffect(() => {\r\n        myInterval = setInterval(() => setNewTime(), 1000);\r\n\r\n        return () => clearInterval(myInterval);\r\n    }, [timer]);\r\n\r\n    const setNewTime = () => {\r\n        if (timer.seconds <= 0 && timer.minutes <= 0) {\r\n            if(timer.seconds > -6 && timer.minutes > -2){\r\n                props.triggerSubmit();\r\n            }\r\n            return clearInterval(myInterval);\r\n        }\r\n        else if (countdownDate) {\r\n            const currentTime = new Date().getTime();\r\n\r\n            const distanceToDate = countdownDate - currentTime;\r\n\r\n            let minutes = Math.floor(\r\n                (distanceToDate % (1000 * 60 * 60)) / (1000 * 60),\r\n            );\r\n            let seconds = Math.floor((distanceToDate % (1000 * 60)) / 1000);\r\n            setTimer({ minutes, seconds });\r\n        }\r\n    };\r\n\r\n    return (\r\n        (timer.minutes <= 0 && timer.seconds <= 0) ?\r\n            (<span className='time_sec float-right mt-1 pr-1' >Time's Up!</span>)\r\n            :\r\n        (<span className='time_sec float-right mt-1 pr-1' >{timer.minutes < 10 ? `0${timer.minutes}` : timer.minutes}:{timer.seconds < 10 ? `0${timer.seconds}` : timer.seconds}</span>)\r\n    );\r\n};\r\n\r\nexport default QuizTimer;\r\n","E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizQues.js",["354"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Button from 'react-bootstrap/Button';\r\nimport QuizOption from './QuizOption';\r\nimport Spinner from '../layout/Spinner';\r\nimport './quiz.css';\r\nimport { connect } from 'react-redux';\r\nimport { submitQuiz } from '../../store/actions/quizActions';\r\n\r\nconst QuizQues = (props) => {\r\n    let history = useHistory();\r\n    const { submitQuiz } = props;\r\n\r\n    let tempUserAnswers;\r\n    useEffect(() => {\r\n        tempUserAnswers = props.questions.map((ele) => {\r\n            return {\r\n                questionId: ele._id,\r\n                selectedAnswer: ''\r\n            };\r\n        });\r\n        setUserAnswers(tempUserAnswers);\r\n    }, [tempUserAnswers]);\r\n\r\n    const [userAnswers, setUserAnswers] = useState(null);\r\n\r\n    const handleOptClick = (index, ans) => {\r\n        console.log('clcic', index);\r\n        let tempArr = [...userAnswers];\r\n        tempArr[index] = { ...tempArr[index], selectedAnswer: ans };\r\n        setUserAnswers(tempArr);\r\n    };\r\n\r\n    const handleOnClick = () => {\r\n\r\n        console.log('Submitting');\r\n        submitQuiz(props.quizId, { userAnswers: userAnswers });\r\n        tempUserAnswers = props.questions.map((ele) => {\r\n            return {\r\n                questionId: ele._id,\r\n                selectedAnswer: ''\r\n            };\r\n        });\r\n        setUserAnswers(tempUserAnswers);\r\n        // window.alert('Quiz Submitted successfully!. Redirectng to /quizzes after 2 sec');\r\n        setTimeout(() => {\r\n            history.push('/quizzes');\r\n        }, 2000);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            { props.questions.map((ele, index) => (\r\n                userAnswers ? (\r\n                    <Accordion key={index} className='my-2'>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Card.Title>\r\n                                    {`${index + 1}.`} {ele.question}\r\n                                </Card.Title>\r\n                                {ele.answers.map((ansEle, ansIdx) => <QuizOption\r\n                                    key={ansIdx}\r\n                                    onClickFunc={() => handleOptClick(index, ansEle)}\r\n                                    isClicked={ansEle === userAnswers[index].selectedAnswer}\r\n                                    text={ansEle} />)}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Accordion>) :\r\n                    <Spinner key={index} />)\r\n            )}\r\n            <div className=\"text-center\" style={{ width: '200px', margin: 'auto' }}>\r\n                <Button className=\"createquiz mb-4\" ref={props.refProp} onClick={handleOnClick}  >Submit Quiz</Button>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    quiz: state.quiz\r\n});\r\n\r\nexport default connect(mapStateToProps, { submitQuiz })(QuizQues);","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeQuizQues.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizCard.js",["355","356"],"import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport { Link } from 'react-router-dom';\r\nimport './quiz.css';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    updateQuiz,\r\n    deleteQuiz,\r\n    startQuiz\r\n} from '../../store/actions/quizActions';\r\nimport { loadUser, setUserNull } from '../../store/actions/authActions';\r\n\r\nconst QuizCard = (props) => {\r\n    const {\r\n        auth: { user },\r\n        quizObj,\r\n        updateQuiz,\r\n        loadUser,\r\n        setUserNull,\r\n        deleteQuiz,\r\n        startQuiz } = props;\r\n\r\n    const handleOnClick = () => {\r\n        setUserNull();\r\n        startQuiz(quizObj._id);\r\n        // loadUser(false, true);\r\n    };\r\n\r\n    return (\r\n        <Card className='quiz_card'>\r\n            <Card.Header className='quiz_card_header text-center'>\r\n                <h3>{quizObj.title}</h3>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Table className='quiz_card_table text-center' >\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Category</th>\r\n                            <th scope=\"col\">Topics</th>\r\n                            <th scope=\"col\">Questions</th>\r\n                            <th scope=\"col\">Duration</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>{quizObj.category}</td>\r\n                            <td>{quizObj.topic}</td>\r\n                            <td>{quizObj.questions.length}</td>\r\n                            <td>{quizObj.duration} Minutes</td>\r\n                        </tr>\r\n                        <tr>\r\n\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n\r\n                {user.role === 'student' &&\r\n                    <div className='text-center' >\r\n                        <Link to={`/quiz/${quizObj.slug}`} onClick={handleOnClick} className=\"btn btn-primary start_quiz_btn mr-2\" >Start Quiz</Link>\r\n                    </div>}\r\n\r\n                {(user.role === 'faculty' || user.role === 'admin') &&\r\n\r\n                    <div className='text-center' >\r\n                        <Link to={`/editQuiz/${quizObj.slug}`} className=\"btn btn-primary start_quiz_btn mr-2\" >Edit</Link>\r\n                        <button onClick={() => deleteQuiz(quizObj._id)} className=\"btn btn-primary start_quiz_btn mr-2\" >Delete</button>\r\n                        <button onClick={() => updateQuiz({ _id: quizObj._id, active: !quizObj.active })} className=\"btn btn-primary start_quiz_btn mr-2\" >{quizObj.active ? 'Deactivate' : 'Activate'}</button>\r\n                    </div>\r\n                }\r\n            </Card.Body>\r\n            <Card.Footer className='quiz_card_footer' style={{ backgroundColor: 'white' }}>\r\n                {user.role === 'student' &&\r\n                    <label htmlFor=\"name\">Uploader: {quizObj.author?.name}</label>}\r\n                {(user.role === 'faculty' || user.role === 'admin') &&\r\n                    <Link to={`/quizSubmissions/${quizObj._id}`} className='alert-link' style={{ color: '#775ecf' }} >Submissions</Link>}\r\n                <label htmlFor=\"name\" style={{ float: 'right' }}>Last updated on {new Date(quizObj.createdAt).toLocaleString('en-us', { day: '2-digit', month: 'short', year: '2-digit', hour: '2-digit', minute: '2-digit' })}</label>\r\n            </Card.Footer>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    quiz: state.quiz,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    updateQuiz,\r\n    deleteQuiz,\r\n    startQuiz,\r\n    loadUser,\r\n    setUserNull\r\n})(QuizCard);","E:\\project\\PlacePrep\\client\\src\\components\\coding\\CodeDescription.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\CodingSolution.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\CreateAptiQuestion.js",["357"],"import React, { useState, useRef } from 'react';\r\n// import './quiz.css';\r\nimport { Button, Form, Alert, Row, Accordion } from 'react-bootstrap';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\n\r\nconst CreateAptiQuestion = (props) => {\r\n    const [toggle, setToggle] = useState(false);\r\n    const inpRef = useRef(null);\r\n\r\n    const handleOnFocus = () => {\r\n        if (!toggle) {\r\n            inpRef.current.click();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"mb-4\">\r\n\r\n            <Accordion>\r\n                <div className=\"row \">\r\n                    <div className=\"col-12\">\r\n                        <Form.Group controlId=\"exampleForm.ControlTextarea1\" >\r\n                            <Form.Label> <b>Question {props.index + 1}</b></Form.Label>\r\n                            <Accordion.Toggle as={Alert.Link}\r\n                                ref={inpRef}\r\n                                onClick={() => setToggle(!toggle)}\r\n                                eventKey=\"0\"\r\n                                style={{ float: 'right', paddingRight: '20px', color: \"#775ecf\" }}\r\n                            >\r\n                                {toggle ? 'Collapse' : 'Expand'}\r\n                            </Accordion.Toggle>\r\n                            <TextareaAutosize\r\n                                className=\"quiz-inputFiled questiontextarea\"\r\n                                name=\"question\"\r\n                                onFocus={handleOnFocus}\r\n                                onChange={props.onChangeFunc}\r\n                                value={props.quesObj.question}\r\n                                placeholder=\"Type question here..\">\r\n\r\n                            </TextareaAutosize>\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n                {/* </Accordion.Toggle> */}\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <>\r\n                        <div className=\"row \">\r\n                            <div className=\"col-sm-6\">\r\n                                <Form.Group controlId={`optionA-${props.quesObj._id}`} >\r\n                                    <Form.Label><b>Option A</b></Form.Label>\r\n                                    <Form.Control className=\"quiz-inputFiled\" onChange={props.onChangeFunc} value={props.quesObj.answers[0]} name=\"optionA\" placeholder=\"\" />\r\n                                </Form.Group>\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                                <Form.Group controlId={`optionB-${props.quesObj._id}`} >\r\n                                    <Form.Label><b>Option B</b></Form.Label>\r\n                                    <Form.Control className=\"quiz-inputFiled \" onChange={props.onChangeFunc} value={props.quesObj.answers[1]} name=\"optionB\" placeholder=\"\" />\r\n                                </Form.Group>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row \">\r\n                            <div className=\"col-sm-6\">\r\n                                <Form.Group controlId={`optionC-${props.quesObj._id}`} >\r\n                                    <Form.Label><b>Option C</b></Form.Label>\r\n                                    <Form.Control className=\"quiz-inputFiled \" onChange={props.onChangeFunc} value={props.quesObj.answers[2]} name=\"optionC\" placeholder=\"\" />\r\n                                </Form.Group>\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                                <Form.Group controlId={`optionD-${props.quesObj._id}`} >\r\n                                    <Form.Label><b>Option D</b></Form.Label>\r\n                                    <Form.Control className=\"quiz-inputFiled \" onChange={props.onChangeFunc} value={props.quesObj.answers[3]} name=\"optionD\" placeholder=\"\" />\r\n                                </Form.Group>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row \">\r\n                            <div className=\"col-sm-6\">\r\n                                <Form.Group controlId={`correctOption-${props.quesObj._id}`} >\r\n                                    <Form.Label><b>Correct option</b></Form.Label>\r\n                                    <Form.Control className=\"quiz-inputFiled \" onChange={props.onChangeFunc} value={props.quesObj.correctAnswer} name=\"correctAnswer\" placeholder=\"Enter answer/text\" />\r\n                                </Form.Group>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mb-4\">\r\n                            <div className=\"col-sm-9\">\r\n                                <Form.Label><b>Explanation</b></Form.Label>\r\n                                <TextareaAutosize className=\"quiz-inputFiled questiontextarea\" onChange={props.onChangeFunc} value={props.quesObj.explanation} name=\"explanation\" placeholder=\"\" ></TextareaAutosize>\r\n                            </div>\r\n                            {props.onDeleteFunc && <div className=\"col-sm-3\">\r\n                                <Button className=\"deletebtn\" onClick={props.onDeleteFunc} >Delete question</Button>\r\n                            </div>}\r\n                        </div>\r\n                        <hr className=\"mb-4 mt-4\"></hr>\r\n                    </>\r\n                </Accordion.Collapse>\r\n            </Accordion>\r\n            \r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default CreateAptiQuestion;","E:\\project\\PlacePrep\\client\\src\\components\\code\\Pagination.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizSubTabRow.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\code\\paginate.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizQuesSub.js",["358","359"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport QuizOptionSub from './QuizOptionSub';\r\nimport '../quiz.css';\r\nimport { connect } from 'react-redux';\r\nimport { submitQuiz } from '../../../store/actions/quizActions';\r\n\r\nconst QuizQues = (props) => {\r\n    const { userAns } = props;\r\n\r\n    const [userAnswers, setUserAnswers] = useState(userAns);\r\n\r\n    return (\r\n        <>\r\n            { props.questions.map((ele, index) => (\r\n                userAnswers ? (\r\n                    <Accordion key={index} className='my-2'>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Card.Title>\r\n                                    {`${index + 1}.`} {ele.question}\r\n                                </Card.Title>\r\n                                {ele.answers.map((ansEle, ansIdx) => <QuizOptionSub\r\n                                    key={ansIdx}\r\n                                    isCorrect={ansEle === ele.correctAnswer}\r\n                                    isClicked={ansEle === userAnswers[index].selectedAnswer}\r\n                                    text={ansEle} />)}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Accordion>) :\r\n                    <h3 key={index}>Loading...</h3>)\r\n            )}\r\n            {/* <div className=\"text-center\" onClick={handleOnClick} style={{ width: '200px', margin: 'auto' }}>\r\n                <Button className=\"createquiz mb-4\"  >Submit Quiz</Button>\r\n            </div> */}\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    quiz: state.quiz\r\n});\r\n\r\nexport default connect(mapStateToProps, { submitQuiz })(QuizQues);","E:\\project\\PlacePrep\\client\\src\\components\\coding\\CodeEditor.js",["360","361","362"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/eclipse.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/theme/blackboard.css\";\r\nimport \"codemirror/theme/base16-light.css\";\r\nimport \"codemirror/theme/ayu-mirage.css\";\r\nimport \"codemirror/addon/edit/matchbrackets\";\r\nimport \"codemirror/addon/edit/closebrackets\";\r\nimport \"codemirror/addon/scroll/simplescrollbars.css\";\r\nimport \"codemirror/addon/scroll/simplescrollbars\";\r\nimport \"codemirror/mode/clike/clike\";\r\nimport \"codemirror/mode/python/python\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    runCode,\r\n    submitCode,\r\n    resetCode,\r\n} from \"../../store/actions/codeActions\";\r\nimport { setAlert } from \"../../store/actions/alertActions\";\r\nimport RunCodeSuccess from './RunCodeSuccess';\r\nimport RunCodeFail from './RunCodeFail';\r\nimport SubmitCodeSuccess from './SubmitCodeSuccess';\r\n\r\n// require(\"codemirror/addon/scroll/simplescrollbars.js\");\r\n\r\nconst CodeEditor = (props) => {\r\n    const { auth: { user }, code: { userCode, runSubmit }, runCode, submitCode, resetCode, setAlert } = props;\r\n\r\n    const [editorSelect, setEditorSelect] = useState({\r\n        lang: \"text/x-csrc\",\r\n        theme: \"material\",\r\n        mime: \"text/x-csrc\",\r\n    });\r\n\r\n    const [showConsole, setShowConsole] = useState(false);\r\n    const [code, setCode] = useState(\"\");\r\n    const handleOnChange = (e) => {\r\n        let selectedMime = e.target.selectedOptions[0].getAttribute(\r\n            \"data-mime\"\r\n        );\r\n        setEditorSelect({\r\n            ...editorSelect,\r\n            [e.target.name]: e.target.value,\r\n            mime: selectedMime,\r\n        });\r\n    };\r\n    let options = {\r\n        lineNumbers: true,\r\n        mode: editorSelect.lang,\r\n        theme: editorSelect.theme,\r\n        mime: editorSelect.mime,\r\n        styleActiveLine: true,\r\n        lineWrapping: true,\r\n        matchBrackets: true,\r\n        autoCloseBrackets: true,\r\n        scrollbarStyle: \"overlay\",\r\n    };\r\n\r\n    // const handleOnBeforeChangeCode = (editor, data, value) => {\r\n    //     setCode(value)\r\n\r\n    // }\r\n    const handleOnRun = () => {\r\n        setShowConsole(true);\r\n        runCode({ code, lang: editorSelect.lang, slug: props.slugProp, noOfInputs: props.inputs });\r\n    };\r\n\r\n\r\n    const handleOnSubmit = () => {\r\n        setShowConsole(true);\r\n        submitCode({ code, lang: editorSelect.lang, slug: props.slugProp, noOfInputs: props.inputs }, props.quesId);\r\n    };\r\n\r\n    const handleOnChangeCode = (editor, data, newCode) => {\r\n        setCode(newCode);\r\n    };\r\n\r\n    const handleOnClick = (e) => {\r\n        if (e.target.value === \"resetCode\") {\r\n            setCode(\"\");\r\n        }\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <div className=\"head\">\r\n                <Form inline className=\"editor-option-form\">\r\n                    <Form.Control\r\n                        as=\"select\"\r\n                        name=\"lang\"\r\n                        className=\"mr-sm-2 editor-select\"\r\n                        onChange={handleOnChange}\r\n                    >\r\n                        <option value=\"text/x-csrc\" data-mime=\"text/x-csrc\">\r\n                            C\r\n                        </option>\r\n                        <option value=\"text/x-c++src\" data-mime=\"text/x-c++src\">\r\n                            C++\r\n                        </option>\r\n                        <option value=\"text/x-java\" data-mime=\"text/x-java\">\r\n                            Java\r\n                        </option>\r\n                        <option value=\"text/x-python\" data-mime=\"text/x-python\">\r\n                            Python\r\n                        </option>\r\n                    </Form.Control>\r\n                    <Form.Control\r\n                        as=\"select\"\r\n                        name=\"theme\"\r\n                        className=\"mr-sm-2 editor-select\"\r\n                        onChange={handleOnChange}\r\n                    >\r\n                        <option value=\"material\">Material</option>\r\n                        <option value=\"ayu-mirage\">Ayu Mirage</option>\r\n                        <option value=\"base16-light\">light</option>\r\n                        <option value=\"blackboard\">Blackboard</option>\r\n                        <option value=\"eclipse\">Eclipse</option>\r\n                    </Form.Control>\r\n                </Form>\r\n            </div>\r\n            <CodeMirror\r\n                value={code}\r\n                options={options}\r\n                autoFocus={true}\r\n                onBeforeChange={handleOnChangeCode}\r\n                onChange={handleOnChangeCode}\r\n            />\r\n            <div className=\"editor-controls\">\r\n                <div>\r\n                    <Button\r\n                        className=\"button reset-code-btn\"\r\n                        value=\"resetCode\"\r\n                        onClick={handleOnClick}\r\n                    >\r\n                        <i className=\"fa fa-undo\" aria-hidden=\"true\"></i>\r\n                        Reset Code\r\n                    </Button>\r\n                </div>\r\n                <div className=\"editor-actions\">\r\n                    <Button className=\"button run-code-btn\" onClick={handleOnRun}>\r\n                        <i className=\"fa fa-play\" aria-hidden=\"true\"></i>\r\n                        <span>Run Code</span>\r\n                    </Button>\r\n                    {user?.role === 'student' && <Button className=\"button submit-code-btn\" onClick={handleOnSubmit}>Submit</Button>}\r\n                </div>\r\n            </div>\r\n            <div className=\"console-container\" style={{ display: `${showConsole ? 'block' : 'none'}` }}>\r\n                {userCode ? (\r\n                    <div style={{ padding: '20px', backgroundColor: 'aliceblue' }} >\r\n                        {userCode.error ? (\r\n                            <RunCodeFail userCodeObj={userCode} />\r\n                        )\r\n                            : (\r\n                                runSubmit === 'run' ? <RunCodeSuccess userCodeObj={userCode} />\r\n                                    : <SubmitCodeSuccess userCodeObj={userCode} />\r\n\r\n                            )\r\n                        }\r\n                    </div>\r\n\r\n                )\r\n                    : <h4>Processing...</h4>}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    code: state.code,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, { runCode, submitCode, resetCode, setAlert })(\r\n    CodeEditor\r\n);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodeSubTabRow.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\codeSubmission\\CodeEditorSub.js",["363","364"],"import React, { Fragment, useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/eclipse.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/theme/blackboard.css\";\r\nimport \"codemirror/theme/base16-light.css\";\r\nimport \"codemirror/theme/ayu-mirage.css\";\r\nimport \"codemirror/addon/edit/matchbrackets\";\r\nimport \"codemirror/addon/edit/closebrackets\";\r\nimport \"codemirror/addon/scroll/simplescrollbars.css\";\r\nimport \"codemirror/addon/scroll/simplescrollbars\";\r\nimport \"codemirror/mode/clike/clike\";\r\nimport \"codemirror/mode/python/python\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    runCode,\r\n    submitCode,\r\n    resetCode,\r\n} from \"../../../store/actions/codeActions\";\r\nimport RunCodeSuccess from '../RunCodeSuccess';\r\nimport RunCodeFail from '../RunCodeFail';\r\nimport SubmitCodeSuccess from '../SubmitCodeSuccess';\r\n\r\n// require(\"codemirror/addon/scroll/simplescrollbars.js\");\r\n\r\nconst CodeEditor = (props) => {\r\n    let { auth: { user }, code: { userCode, runSubmit },\r\n        runCode,\r\n        submitCode,\r\n        resetCode,\r\n        userSolution, language } = props;\r\n\r\n    if (language === 'C') {\r\n        language = 'text/x-csrc';\r\n    }\r\n    else if (language === 'C++') {\r\n        language = 'text/x-c++src';\r\n    }\r\n    else if (language === 'Java') {\r\n        language = 'text/x-java';\r\n    }\r\n    else if (language === 'Python') {\r\n        language = 'text/x-python';\r\n    }\r\n\r\n    const [editorSelect, setEditorSelect] = useState({\r\n        lang: language,\r\n        theme: \"material\",\r\n        mime: \"text/x-csrc\",\r\n    });\r\n\r\n    const [showConsole, setShowConsole] = useState(false);\r\n    const [code, setCode] = useState(userSolution);\r\n    const handleOnChange = (e) => {\r\n        let selectedMime = e.target.selectedOptions[0].getAttribute(\r\n            \"data-mime\"\r\n        );\r\n        setEditorSelect({\r\n            ...editorSelect,\r\n            [e.target.name]: e.target.value,\r\n            mime: selectedMime,\r\n        });\r\n    };\r\n    let options = {\r\n        lineNumbers: true,\r\n        mode: editorSelect.lang,\r\n        theme: editorSelect.theme,\r\n        mime: editorSelect.mime,\r\n        styleActiveLine: true,\r\n        lineWrapping: true,\r\n        matchBrackets: true,\r\n        autoCloseBrackets: true,\r\n        scrollbarStyle: \"overlay\",\r\n    };\r\n\r\n    // const handleOnBeforeChangeCode = (editor, data, value) => {\r\n    //     setCode(value)\r\n\r\n    // }\r\n    const handleOnRun = () => {\r\n        setShowConsole(true);\r\n        runCode({ code, lang: editorSelect.lang, slug: props.slugProp, noOfInputs: props.inputs });\r\n    };\r\n\r\n\r\n    const handleOnSubmit = () => {\r\n        setShowConsole(true);\r\n        submitCode({ code, lang: editorSelect.lang, slug: props.slugProp, noOfInputs: props.inputs }, props.quesId);\r\n    };\r\n\r\n    const handleOnChangeCode = (editor, data, newCode) => {\r\n        setCode(newCode);\r\n    };\r\n\r\n    const handleOnClick = (e) => {\r\n        if (e.target.value === \"resetCode\") {\r\n            setCode(\"\");\r\n        }\r\n    };\r\n    return (\r\n        <Fragment>\r\n            <div className=\"head\">\r\n                <Form inline className=\"editor-option-form\">\r\n                    <Form.Control\r\n                        as=\"select\"\r\n                        name=\"lang\"\r\n                        value={editorSelect.lang}\r\n                        className=\"mr-sm-2 editor-select\"\r\n                        onChange={handleOnChange}\r\n                    >\r\n                        <option value=\"text/x-csrc\" data-mime=\"text/x-csrc\">\r\n                            C\r\n                        </option>\r\n                        <option value=\"text/x-c++src\" data-mime=\"text/x-c++src\">\r\n                            C++\r\n                        </option>\r\n                        <option value=\"text/x-java\" data-mime=\"text/x-java\">\r\n                            Java\r\n                        </option>\r\n                        <option value=\"text/x-python\" data-mime=\"text/x-python\">\r\n                            Python\r\n                        </option>\r\n                    </Form.Control>\r\n                    <Form.Control\r\n                        as=\"select\"\r\n                        name=\"theme\"\r\n                        className=\"mr-sm-2 editor-select\"\r\n                        onChange={handleOnChange}\r\n                    >\r\n                        <option value=\"material\">Material</option>\r\n                        <option value=\"ayu-mirage\">Ayu Mirage</option>\r\n                        <option value=\"base16-light\">light</option>\r\n                        <option value=\"blackboard\">Blackboard</option>\r\n                        <option value=\"eclipse\">Eclipse</option>\r\n                    </Form.Control>\r\n                </Form>\r\n            </div>\r\n            <CodeMirror\r\n                value={code}\r\n                options={options}\r\n                autoFocus={true}\r\n                onBeforeChange={handleOnChangeCode}\r\n                onChange={handleOnChangeCode}\r\n            />\r\n            <div className=\"editor-controls\">\r\n                <div>\r\n                    <Button\r\n                        className=\"button reset-code-btn\"\r\n                        value=\"resetCode\"\r\n                        onClick={handleOnClick}\r\n                    >\r\n                        <i className=\"fa fa-undo\" aria-hidden=\"true\"></i>\r\n                        Reset Code\r\n                    </Button>\r\n                </div>\r\n                <div className=\"editor-actions\">\r\n                    <Button className=\"button run-code-btn\" onClick={handleOnRun}>\r\n                        <i className=\"fa fa-play\" aria-hidden=\"true\"></i>\r\n                        <span>Run Code</span>\r\n                    </Button>\r\n                    {user?.role === 'student' && <Button className=\"button submit-code-btn\" onClick={handleOnSubmit}>Submit</Button>}\r\n                </div>\r\n            </div>\r\n            <div className=\"console-container\" style={{ display: `${showConsole ? 'block' : 'none'}` }}>\r\n                {userCode ? (\r\n                    <div style={{ padding: '20px', backgroundColor: 'aliceblue' }} >\r\n                        {userCode.error ? (\r\n                            <RunCodeFail userCodeObj={userCode} />\r\n                        )\r\n                            : (\r\n                                runSubmit === 'run' ? <RunCodeSuccess userCodeObj={userCode} />\r\n                                    : <SubmitCodeSuccess userCodeObj={userCode} />\r\n\r\n                            )\r\n                        }\r\n                    </div>\r\n\r\n                )\r\n                    : <h4>Processing...</h4>}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    code: state.code,\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, { runCode, submitCode, resetCode })(\r\n    CodeEditor\r\n);\r\n","E:\\project\\PlacePrep\\client\\src\\components\\layout\\MyModal.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\QuizOption.js",["365"],"import React, { Fragment, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport './quiz.css';\r\n\r\nconst QuizOption = (props) => {\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={`mt-3 mb-3 pr-2 rounded option ${(props.isClicked && 'correct')}`}>\r\n                <Accordion.Toggle as={Button} onClick={props.onClickFunc} variant=\"\" eventKey={props.isCorrect ? '0' : '1'}  >\r\n                    {props.text}\r\n                </Accordion.Toggle>\r\n                \r\n                {/* <div className='icon cross' ><i className=\"fa fa-times\" aria-hidden=\"true\"></i></div> */}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default QuizOption;\r\n","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\ViewAnswer.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\sidebar\\MenuItemData.js",["366"],"\r\nexport const admin = [\r\n    { name: 'Dashboard', to: '/', icon: 'fa fa-tachometer', subMenuItems: [] },\r\n    { name: 'My Profile', to: '/me', icon: 'fa fa-tachometer', subMenuItems: [] },\r\n    { name: 'Create a quiz', to: '/createQuiz', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Coding Questions', to: '/codeQuestions', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Create code question', to: '/createCodeQuestion', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'See all quizzes', to: '/quizzes', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Practice Problems', to: '/practiceProblems', icon: 'fa fa-pie-chart', subMenuItems: [] },\r\n];\r\n\r\n\r\nexport const faculty = [\r\n    { name: 'Dashboard', to: '/', icon: 'fa fa-tachometer', subMenuItems: [] },\r\n    { name: 'My Profile', to: '/me', icon: 'fa fa-tachometer', subMenuItems: [] },\r\n    { name: 'Create a quiz', to: '/createQuiz', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Coding Questions', to: '/codeQuestions', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Create code question', to: '/createCodeQuestion', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'See all quizzes', to: '/quizzes', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Practice Problems', to: '/practiceProblems', icon: 'fa fa-pie-chart', subMenuItems: [] }\r\n];\r\n\r\n\r\nexport const student = [\r\n    { name: 'Dashboard', to: '/', icon: 'fa fa-tachometer', subMenuItems: [] },\r\n    { name: 'My Profile', to: '/me', icon: 'fa fa-tachometer', subMenuItems: [] },\r\n    { name: 'Coding Questions', to: '/codeQuestions', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Code Submissions', to: '/codeSubmissions', icon: 'fa fa-pie-chart', subMenuItems: [] },\r\n    { name: 'See all quizzes', to: '/quizzes', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Quiz Submissions', to: '/quizSubmissions', icon: 'fa fa-pie-chart', subMenuItems: [] },\r\n    { name: 'Practice Problems', to: '/practiceProblems', icon: 'fa fa-pie-chart', subMenuItems: [] },\r\n];\r\n\r\nexport default [\r\n    { name: 'Dashboard', to: '/', icon: 'fa fa-tachometer', subMenuItems: [] },\r\n    { name: 'My Profile', to: '/me', icon: 'fa fa-tachometer', subMenuItems: [] },\r\n    { name: 'Create a quiz', to: '/createQuiz', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Coding', to: '/code', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Coding Questions', to: '/codeQuestions', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Create a code question', to: '/createCodeQuestion', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'See all quizzes', to: '/quizzes', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Start a quiz', to: '/quiz', icon: 'fa fa-ticket', subMenuItems: [] },\r\n    { name: 'Quiz Submissions', to: '/quizSubmissions', icon: 'fa fa-pie-chart', subMenuItems: [] },\r\n    { name: 'Practice Problems', to: '/practiceProblems', icon: 'fa fa-pie-chart', subMenuItems: [] },\r\n];\r\n","E:\\project\\PlacePrep\\client\\src\\components\\practiceProblems\\PracticeQuizOption.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\quizSubmission\\QuizOptionSub.js",["367"],"import React, { Fragment, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport '../quiz.css';\r\n\r\nconst QuizOption = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <div className={`mt-3 mb-3 pr-2 rounded option ${(props.isClicked) ? (props.isCorrect ? 'correct' : 'incorrect') : (props.isCorrect && 'correct')}`}>\r\n                <Accordion.Toggle as={Button} onClick={props.onClickFunc} variant=\"\" eventKey={props.isCorrect ? '0' : '1'}  >\r\n                    {props.text}\r\n                </Accordion.Toggle>\r\n                {props.isClicked ? (props.isCorrect ?\r\n                    <div className='icon tick' ><i className=\"fa fa-check\" aria-hidden=\"true\"></i></div> :\r\n                    <div className='icon cross' ><i className=\"fa fa-times\" aria-hidden=\"true\"></i></div>)\r\n                    : (props.isCorrect && <div className='icon tick' ><i className=\"fa fa-check\" aria-hidden=\"true\"></i></div>)\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default QuizOption;\r\n","E:\\project\\PlacePrep\\client\\src\\components\\coding\\SubmitCodeSuccess.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\RunCodeFail.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\coding\\RunCodeSuccess.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\auth\\ResPassModal.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\quiz\\CreateQuizQuestion.js",["368"],"import React, { useState, useRef } from \"react\";\r\n// import './quiz.css';\r\nimport { Button, Form, Alert, Row, Accordion } from \"react-bootstrap\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\n\r\nfunction QuizQuestion(props) {\r\n    const [toggle, setToggle] = useState(false);\r\n    const inpRef = useRef(null);\r\n\r\n    const handleOnFocus = () => {\r\n        if (!toggle) {\r\n            inpRef.current.click();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <Accordion>\r\n                {/* <Accordion.Toggle as={Row} eventKey=\"0\" style={{ cursor: 'pointer', backgroundColor: 'rgb(164, 166, 179)'}}> */}\r\n                <div className=\"row \">\r\n                    <div className=\"col-12\">\r\n                        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                            <Form.Label>\r\n                                {\" \"}\r\n                                <b>Question {props.index + 1}</b>\r\n                            </Form.Label>\r\n                            <Accordion.Toggle\r\n                                as={Alert.Link}\r\n                                ref={inpRef}\r\n                                onClick={() => setToggle(!toggle)}\r\n                                eventKey=\"0\"\r\n                                style={{\r\n                                    float: \"right\",\r\n                                    paddingRight: \"20px\",\r\n                                    color: \"#775ecf\",\r\n                                }}\r\n                            >\r\n                                {toggle ? \"Collapse\" : \"Expand\"}\r\n                            </Accordion.Toggle>\r\n                            <TextareaAutosize\r\n                                className=\"quiz-inputFiled questiontextarea\"\r\n                                name=\"question\"\r\n                                onFocus={handleOnFocus}\r\n                                onChange={props.onChangeFunc}\r\n                                value={props.quesObj.question}\r\n                                placeholder=\"Type question here..\"\r\n                                required\r\n                            ></TextareaAutosize>\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n                {/* </Accordion.Toggle> */}\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <>\r\n                        <div className=\"row \">\r\n                            <div className=\"col-sm-6\">\r\n                                <Form.Group\r\n                                    controlId={`optionA-${props.quesObj._id}`}\r\n                                >\r\n                                    <Form.Label>\r\n                                        <b>Option A</b>\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        className=\"quiz-inputFiled\"\r\n                                        onChange={props.onChangeFunc}\r\n                                        value={props.quesObj.answers[0]}\r\n                                        name=\"optionA\"\r\n                                        placeholder=\"\"\r\n                                        required\r\n                                    />\r\n                                </Form.Group>\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                                <Form.Group\r\n                                    controlId={`optionB-${props.quesObj._id}`}\r\n                                >\r\n                                    <Form.Label>\r\n                                        <b>Option B</b>\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        className=\"quiz-inputFiled \"\r\n                                        onChange={props.onChangeFunc}\r\n                                        value={props.quesObj.answers[1]}\r\n                                        name=\"optionB\"\r\n                                        placeholder=\"\"\r\n                                        required\r\n                                    />\r\n                                </Form.Group>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row \">\r\n                            <div className=\"col-sm-6\">\r\n                                <Form.Group\r\n                                    controlId={`optionC-${props.quesObj._id}`}\r\n                                >\r\n                                    <Form.Label>\r\n                                        <b>Option C</b>\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        className=\"quiz-inputFiled \"\r\n                                        onChange={props.onChangeFunc}\r\n                                        value={props.quesObj.answers[2]}\r\n                                        name=\"optionC\"\r\n                                        placeholder=\"\"\r\n                                        required\r\n                                    />\r\n                                </Form.Group>\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                                <Form.Group\r\n                                    controlId={`optionD-${props.quesObj._id}`}\r\n                                >\r\n                                    <Form.Label>\r\n                                        <b>Option D</b>\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        className=\"quiz-inputFiled \"\r\n                                        onChange={props.onChangeFunc}\r\n                                        value={props.quesObj.answers[3]}\r\n                                        name=\"optionD\"\r\n                                        placeholder=\"\"\r\n                                        required\r\n                                    />\r\n                                </Form.Group>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row \">\r\n                            <div className=\"col-sm-6\">\r\n                                <Form.Group\r\n                                    controlId={`correctOption-${props.quesObj._id}`}\r\n                                >\r\n                                    <Form.Label>\r\n                                        <b>Correct option</b>\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        className=\"quiz-inputFiled \"\r\n                                        onChange={props.onChangeFunc}\r\n                                        value={props.quesObj.correctAnswer}\r\n                                        name=\"correctAnswer\"\r\n                                        placeholder=\"Enter answer/text\"\r\n                                        required\r\n                                    />\r\n                                </Form.Group>\r\n                            </div>\r\n                            <div className=\"col-sm-6\">\r\n                                <Button\r\n                                    className=\"deletebtn\"\r\n                                    onClick={props.onDeleteFunc}\r\n                                >\r\n                                    Delete question\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                </Accordion.Collapse>\r\n            </Accordion>\r\n            <hr className=\"mt-3 \"></hr>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuizQuestion;\r\n","E:\\project\\PlacePrep\\client\\src\\components\\code\\CodeTableRow.js",["369","370"],"E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\DashboardCard.js",[],"E:\\project\\PlacePrep\\client\\src\\components\\dashboard\\DashboardUserTable.js",[],{"ruleId":"371","replacedBy":"372"},{"ruleId":"373","replacedBy":"374"},{"ruleId":"375","severity":1,"message":"376","line":41,"column":8,"nodeType":"377","endLine":41,"endColumn":15,"suggestions":"378"},{"ruleId":"375","severity":1,"message":"379","line":31,"column":8,"nodeType":"377","endLine":31,"endColumn":10,"suggestions":"380"},{"ruleId":"375","severity":1,"message":"381","line":60,"column":8,"nodeType":"377","endLine":60,"endColumn":24,"suggestions":"382"},{"ruleId":"383","severity":1,"message":"384","line":11,"column":20,"nodeType":"385","messageId":"386","endLine":11,"endColumn":31},{"ruleId":"383","severity":1,"message":"387","line":19,"column":9,"nodeType":"385","messageId":"386","endLine":19,"endColumn":17},{"ruleId":"375","severity":1,"message":"379","line":28,"column":8,"nodeType":"377","endLine":28,"endColumn":10,"suggestions":"388"},{"ruleId":"383","severity":1,"message":"389","line":4,"column":8,"nodeType":"385","messageId":"386","endLine":4,"endColumn":17},{"ruleId":"383","severity":1,"message":"390","line":5,"column":8,"nodeType":"385","messageId":"386","endLine":5,"endColumn":14},{"ruleId":"383","severity":1,"message":"391","line":6,"column":10,"nodeType":"385","messageId":"386","endLine":6,"endColumn":14},{"ruleId":"383","severity":1,"message":"392","line":13,"column":35,"nodeType":"385","messageId":"386","endLine":13,"endColumn":46},{"ruleId":"375","severity":1,"message":"393","line":27,"column":8,"nodeType":"377","endLine":27,"endColumn":10,"suggestions":"394"},{"ruleId":"375","severity":1,"message":"395","line":13,"column":8,"nodeType":"377","endLine":13,"endColumn":10,"suggestions":"396"},{"ruleId":"383","severity":1,"message":"397","line":7,"column":8,"nodeType":"385","messageId":"386","endLine":7,"endColumn":17},{"ruleId":"383","severity":1,"message":"398","line":16,"column":17,"nodeType":"385","messageId":"386","endLine":16,"endColumn":21},{"ruleId":"383","severity":1,"message":"387","line":17,"column":9,"nodeType":"385","messageId":"386","endLine":17,"endColumn":17},{"ruleId":"375","severity":1,"message":"399","line":27,"column":8,"nodeType":"377","endLine":27,"endColumn":10,"suggestions":"400"},{"ruleId":"375","severity":1,"message":"401","line":42,"column":8,"nodeType":"377","endLine":42,"endColumn":15,"suggestions":"402"},{"ruleId":"383","severity":1,"message":"398","line":10,"column":21,"nodeType":"385","messageId":"386","endLine":10,"endColumn":25},{"ruleId":"375","severity":1,"message":"403","line":22,"column":8,"nodeType":"377","endLine":22,"endColumn":10,"suggestions":"404"},{"ruleId":"375","severity":1,"message":"401","line":44,"column":8,"nodeType":"377","endLine":44,"endColumn":24,"suggestions":"405"},{"ruleId":"375","severity":1,"message":"406","line":20,"column":8,"nodeType":"377","endLine":20,"endColumn":10,"suggestions":"407"},{"ruleId":"375","severity":1,"message":"408","line":20,"column":8,"nodeType":"377","endLine":20,"endColumn":10,"suggestions":"409"},{"ruleId":"375","severity":1,"message":"410","line":46,"column":8,"nodeType":"377","endLine":46,"endColumn":14,"suggestions":"411"},{"ruleId":"383","severity":1,"message":"412","line":110,"column":11,"nodeType":"385","messageId":"386","endLine":110,"endColumn":20},{"ruleId":"383","severity":1,"message":"413","line":1,"column":28,"nodeType":"385","messageId":"386","endLine":1,"endColumn":36},{"ruleId":"375","severity":1,"message":"414","line":21,"column":8,"nodeType":"377","endLine":21,"endColumn":10,"suggestions":"415"},{"ruleId":"383","severity":1,"message":"416","line":22,"column":9,"nodeType":"385","messageId":"386","endLine":22,"endColumn":26},{"ruleId":"375","severity":1,"message":"417","line":48,"column":8,"nodeType":"377","endLine":48,"endColumn":14,"suggestions":"418"},{"ruleId":"383","severity":1,"message":"412","line":115,"column":11,"nodeType":"385","messageId":"386","endLine":115,"endColumn":20},{"ruleId":"419","severity":1,"message":"420","line":203,"column":41,"nodeType":"421","endLine":207,"endColumn":42},{"ruleId":"419","severity":1,"message":"420","line":241,"column":41,"nodeType":"421","endLine":245,"endColumn":42},{"ruleId":"375","severity":1,"message":"422","line":45,"column":8,"nodeType":"377","endLine":45,"endColumn":10,"suggestions":"423"},{"ruleId":"375","severity":1,"message":"424","line":98,"column":8,"nodeType":"377","endLine":98,"endColumn":10,"suggestions":"425"},{"ruleId":"383","severity":1,"message":"426","line":1,"column":38,"nodeType":"385","messageId":"386","endLine":1,"endColumn":44},{"ruleId":"383","severity":1,"message":"427","line":9,"column":27,"nodeType":"385","messageId":"386","endLine":9,"endColumn":43},{"ruleId":"375","severity":1,"message":"428","line":17,"column":22,"nodeType":"429","endLine":17,"endColumn":59},{"ruleId":"375","severity":1,"message":"430","line":18,"column":27,"nodeType":"429","endLine":23,"endColumn":11},{"ruleId":"383","severity":1,"message":"431","line":4,"column":8,"nodeType":"385","messageId":"386","endLine":4,"endColumn":13},{"ruleId":"383","severity":1,"message":"387","line":20,"column":9,"nodeType":"385","messageId":"386","endLine":20,"endColumn":17},{"ruleId":"383","severity":1,"message":"432","line":3,"column":31,"nodeType":"385","messageId":"386","endLine":3,"endColumn":34},{"ruleId":"383","severity":1,"message":"433","line":1,"column":37,"nodeType":"385","messageId":"386","endLine":1,"endColumn":46},{"ruleId":"383","severity":1,"message":"434","line":12,"column":25,"nodeType":"385","messageId":"386","endLine":12,"endColumn":39},{"ruleId":"383","severity":1,"message":"433","line":1,"column":37,"nodeType":"385","messageId":"386","endLine":1,"endColumn":46},{"ruleId":"383","severity":1,"message":"435","line":30,"column":81,"nodeType":"385","messageId":"386","endLine":30,"endColumn":90},{"ruleId":"383","severity":1,"message":"436","line":30,"column":92,"nodeType":"385","messageId":"386","endLine":30,"endColumn":100},{"ruleId":"383","severity":1,"message":"431","line":2,"column":24,"nodeType":"385","messageId":"386","endLine":2,"endColumn":29},{"ruleId":"383","severity":1,"message":"435","line":32,"column":9,"nodeType":"385","messageId":"386","endLine":32,"endColumn":18},{"ruleId":"383","severity":1,"message":"413","line":1,"column":27,"nodeType":"385","messageId":"386","endLine":1,"endColumn":35},{"ruleId":"437","severity":1,"message":"438","line":34,"column":1,"nodeType":"439","endLine":45,"endColumn":3},{"ruleId":"383","severity":1,"message":"413","line":1,"column":27,"nodeType":"385","messageId":"386","endLine":1,"endColumn":35},{"ruleId":"383","severity":1,"message":"432","line":3,"column":31,"nodeType":"385","messageId":"386","endLine":3,"endColumn":34},{"ruleId":"440","severity":1,"message":"441","line":20,"column":21,"nodeType":"421","endLine":24,"endColumn":22},{"ruleId":"440","severity":1,"message":"441","line":62,"column":21,"nodeType":"421","endLine":67,"endColumn":22},"no-native-reassign",["442"],"no-negated-in-lhs",["443"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clearQuizErrors' and 'setAlert'. Either include them or remove the dependency array.","ArrayExpression",["444"],"React Hook useEffect has missing dependencies: 'getQuiz' and 'slug'. Either include them or remove the dependency array.",["445"],"React Hook useEffect has missing dependencies: 'clearQuizErrors', 'props.history', and 'setAlert'. Either include them or remove the dependency array.",["446"],"no-unused-vars","'setUserNull' is defined but never used.","Identifier","unusedVar","'loadUser' is assigned a value but never used.",["447"],"'Container' is defined but never used.","'Button' is defined but never used.","'Link' is defined but never used.","'quizLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getQuizzes' and 'user?.role'. Either include them or remove the dependency array.",["448"],"React Hook useEffect has a missing dependency: 'getCategoryAndTopic'. Either include it or remove the dependency array.",["449"],"'QuizTimer' is defined but never used.","'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'categorySlug', 'getPracticeProblems', and 'topicSlug'. Either include them or remove the dependency array.",["450"],"React Hook useEffect has missing dependencies: 'clearPracticeProblemErrors' and 'setAlert'. Either include them or remove the dependency array.",["451"],"React Hook useEffect has missing dependencies: 'getPracticeProblem' and 'id'. Either include them or remove the dependency array.",["452"],["453"],"React Hook useEffect has missing dependencies: 'getQuestion' and 'slug'. Either include them or remove the dependency array.",["454"],"React Hook useEffect has missing dependencies: 'getCodeSubmission' and 'id'. Either include them or remove the dependency array.",["455"],"React Hook useEffect has missing dependencies: 'codeId' and 'getCodeSubmissions'. Either include them or remove the dependency array.",["456"],"'subNumber' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'getQuizSubmission' and 'quizSubId'. Either include them or remove the dependency array.",["457"],"'getQuizSubmission' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getQuizSubmissions' and 'quizId'. Either include them or remove the dependency array.",["458"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useLayoutEffect has a missing dependency: 'menuItems'. Either include it or remove the dependency array.",["459"],"React Hook useEffect has a missing dependency: 'menuItems'. Either include it or remove the dependency array.",["460"],"'useRef' is defined but never used.","'setCountdownDate' is assigned a value but never used.","Assignments to the 'myInterval' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'tempUserAnswers' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'Alert' is defined but never used.","'Row' is defined but never used.","'useEffect' is defined but never used.","'setUserAnswers' is assigned a value but never used.","'resetCode' is assigned a value but never used.","'setAlert' is assigned a value but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","no-global-assign","no-unsafe-negation",{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"463","fix":"467"},{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},{"desc":"490","fix":"492"},"Update the dependencies array to be: [clearQuizErrors, error, setAlert]",{"range":"493","text":"494"},"Update the dependencies array to be: [getQuiz, slug]",{"range":"495","text":"496"},"Update the dependencies array to be: [clearQuizErrors, current, error, props.history, setAlert]",{"range":"497","text":"498"},{"range":"499","text":"496"},"Update the dependencies array to be: [getQuizzes, user?.role]",{"range":"500","text":"501"},"Update the dependencies array to be: [getCategoryAndTopic]",{"range":"502","text":"503"},"Update the dependencies array to be: [categorySlug, getPracticeProblems, topicSlug]",{"range":"504","text":"505"},"Update the dependencies array to be: [clearPracticeProblemErrors, error, setAlert]",{"range":"506","text":"507"},"Update the dependencies array to be: [getPracticeProblem, id]",{"range":"508","text":"509"},"Update the dependencies array to be: [clearPracticeProblemErrors, current, error, setAlert]",{"range":"510","text":"511"},"Update the dependencies array to be: [getQuestion, slug]",{"range":"512","text":"513"},"Update the dependencies array to be: [getCodeSubmission, id]",{"range":"514","text":"515"},"Update the dependencies array to be: [codeId, getCodeSubmissions, user]",{"range":"516","text":"517"},"Update the dependencies array to be: [getQuizSubmission, quizSubId]",{"range":"518","text":"519"},"Update the dependencies array to be: [getQuizSubmissions, quizId, user]",{"range":"520","text":"521"},"Update the dependencies array to be: [menuItems]",{"range":"522","text":"523"},{"range":"524","text":"523"},[1139,1146],"[clearQuizErrors, error, setAlert]",[824,826],"[getQuiz, slug]",[1737,1753],"[clearQuizErrors, current, error, props.history, setAlert]",[863,865],[810,812],"[getQuizzes, user?.role]",[448,450],"[getCategoryAndTopic]",[950,952],"[categorySlug, getPracticeProblems, topicSlug]",[1215,1222],"[clearPracticeProblemErrors, error, setAlert]",[797,799],"[getPracticeProblem, id]",[1413,1429],"[clearPracticeProblemErrors, current, error, setAlert]",[675,677],"[getQuestion, slug]",[717,719],"[getCodeSubmission, id]",[1419,1425],"[codeId, getCodeSubmissions, user]",[684,686],"[getQuizSubmission, quizSubId]",[1470,1476],"[getQuizSubmissions, quizId, user]",[1452,1454],"[menuItems]",[3651,3653]]